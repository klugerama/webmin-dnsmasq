
lang=en
author=Loren Cress (originally Neil Fisher)
module_author=Loren Cress (originally Neil Fisher)
homepage=https://github.com/klugerama/webmin-dnsmasq
copyright=(C) 2023 by Loren Cress &amp;lt;lcress@gmail.com&gt;
license=GPLv3

# Global values
index_title=DNSMasq - A lightweight DHCP and caching DNS server
index_eserver=The DNSMasq server executable $1 does not exist. If you have DNSMasq installed, adjust the <a href='$2'>module configuration</a> to use the correct path.
index_dnsmasq=DNSMasq
index_econf=The DNSMasq configuration file $1 does not exist. If you have DNSMasq installed, adjust the <a href='$2'>module configuration</a> to use the correct path.

acl_start=Can start DNSmasq?
acl_stop=Can stop DNSmasq?
acl_restart=Can restart DNSmasq?
acl_reload=Can reload DNSmasq configuration?
acl_dump_logs=Can dump DNSmasq logs?
acl_view_logs=Can view DNSmasq logs?
acl_edit_hosts=Can edit /etc/hosts and other hosts files?
acl_edit_scripts=Can edit scripts?
acl_manual_edit=Can edit configuration files manually?
acl_change_perms=Can change file/directory permissions?

acl_start_ecannot=You are not allowed to start DNSmasq
acl_stop_ecannot=You are not allowed to stop DNSmasq
acl_restart_ecannot=You are not allowed to restart DNSmasq
acl_reload_ecannot=You are not allowed to reload DNSmasq
acl_dump_logs_ecannot=You are not allowed to dump DNSmasq logs
acl_view_logs_ecannot=You are not allowed to view DNSmasq logs
acl_edit_scripts_ecannot=You are not allowed to edit scripts
acl_manual_edit_ecannot=You are not allowed to manually edit files
acl_change_perms_ecannot=You are not allowed to change file/directory permissions

start_err=Failed to start DNSmasq
start_ecmd=$1 failed : $2
start_eunknown=Unknown reason
start_eafter=DNSmasq does not appear to be running
stop_err=Failed to stop DNSmasq
restart_err=Failed to restart DNSmasq
reload_err=Failed to reload configuration
dump_logs_err=Failed to dump DNSmasq logs

view_header=Last $1 lines of $2
view_empty=Log file is empty
view_refresh=Refresh
view_filter=Only show lines with text $1
view_no_files=There are no files to view or edit.

current_version_message=This is the most recent version ($1) of this module.
gh_message=<a href="https://github.com/klugerama/webmin-dnsmasq" target="_blank">Click here</a> to go to the module project page
update_message=Currently using module version $1. A newer version of this module is available. $2 to go to the release page.
click_here=Click here
update_module=Update module

column_option=Option
column_value=Value
enabled=Enabled
disabled=Disabled
default=Default
description_expand=Description...

button_save=Save
# button_submit=Submit
button_cancel=Cancel
button_manual_edit=Manual Edit
button_fix_permissions=Fix Permissions
button_ignore=Ignore
button_unignore=Unignore
# button_undo=Undo
button_enable_sel=Enable
button_disable_sel=Disable
button_delete_sel=Delete
button_ignore_sel=Ignore
button_unignore_sel=Unignore

restarting=Trying to restart DNSmasq. Script messages are:
selected_none=Nothing selected
configuration_error_heading=Configuration Error
configuration_errors_heading=Configuration Errors
configuration_ignored_lines_heading=Ignored Configuration Errors
error=Error
err_file=File
err_line=Line
err_lineno=Line
err_configfield=Value name
err_param=Parameter
err_desc=Description
err_help=Try going back and retyping the offending information
err_configbad=Configuration file has an error
err_has_errors_=$1 errors found in configuration
err_goto=Error Page
err_unknown_=$1: unknown option
err_numbad=Not a valid number
err_numlow=Value is too low
err_numhigh=Value is too high
err_ipbad=Not a valid IP address
err_netmaskbad=Not a valid netmask
err_timebad=Not a valid time
err_filebad_exist=Not a valid file
err_filebad_perms_=File permissions invalid - needs $1
err_pathbad_exist=Not a valid path
err_pathbad_perms_=Path permissions invalid - needs $1
err_dirbad_exist=Not a valid directory
err_dirbad_perms_=Directory permissions invalid - needs $1
err_hostbad=Not a valid host name
err_ifacebad=Not a valid interface
err_domainbad=Not a valid domain
err_namebad=Not a valid name
err_userbad=Not a valid user
err_groupbad=Not a valid group
err_valreq=Value is required
yes=Yes
no=No
with_selected=With selected:
add_=Add $1
create_=Create $1
edit_=Edit $1
ui_selnone=Select none
empty_value=&lt;empty&gt;

footnote_required_parameter=Required parameter if value is enabled

index_button_start=Start DNSmasq
index_button_restart=Restart DNSmasq
index_button_stop=Stop DNSmasq
index_button_reload=Reload configs
index_button_dump_logs=Dump logs
index_basic=Basic Settings
index_other=Other Settings

start_desc=Click this button to start DNSMasq.
restart_desc=Click this button to restart DNSMasq. This is necessary to apply most configuration changes.
stop_desc=Click this button to stop DNSMasq.
reload_desc=Click this button to force DNSMasq to reread certain configuration files without restarting. See the README file or DNSMasq documentation for more information.
dump_logs_desc=Click this button to dump DNSMasq logs to the configured log facility without restarting.

tmpl_path_to_file_or_directory=/path/to/file/or/directory
tmpl_path_to_file=/path/to/file
tmpl_path_to_directory=/path/to/directory
tmpl_TTL=TTL
tmpl_log_facility=facility or /path/to/file
tmpl_log_async=lines
tmpl_username=username
tmpl_groupname=groupname
tmpl_port=port
tmpl_size=size
tmpl_interface=interface
tmpl_ip=0.0.0.0
tmpl_ip6=1234::0000
tmpl_netmask=255.255.255.255
tmpl_tag=tag
tmpl_hostname=hostname
tmpl_domain=domain
tmpl_service_name=service name
tmpl_address_range=192.168.0.50,192.168.0.70
tmpl_clientid=client_id
tmpl_infiniband=InfiniBand address
tmpl_class=class
tmpl_key_tag=key-tag
tmpl_algorithm=algorithm
tmpl_digest=digest
tmpl_digest_type=digest-type
tmpl_subnet=subnet
tmpl_prefix=prefix
tmpl_prefix_length=prefix-length
tmpl_mac=00:00:00:00:00:00
tmpl_option=option
tmpl_option_name=opt-name
tmpl_enterprise=IANA enterprise number
tmpl_vendorclass=vendor-class
tmpl_userclass=user-class
tmpl_value=value
tmpl_address=address
tmpl_name=name
tmpl_servername=server name
tmpl_server_address=server address
tmpl_tftp_server_name=TFTP server name
tmpl_network_id=network-id
tmpl_mtu=mtu size
tmpl_filter=*.conf
tmpl_exceptions=.bak
tmpl_integer=integer
tmpl_ipset=ipset
tmpl_connmark=connmark
tmpl_pattern=pattern
tmpl_preference=preference
tmpl_srv_host_service=_service
tmpl_prot=_prot
tmpl_target=target
tmpl_srv_host_priority=priority
tmpl_weight=weight
tmpl_text=text
tmpl_order=order
tmpl_flags=flags
tmpl_caa_flags=0-255
tmpl_caa_tag=00000000
tmpl_service=service
tmpl_cname=cname
tmpl_regexp=regexp
tmpl_replacement=replacement
tmpl_rrnumber=RR-number
tmpl_hexdata=hex data
tmpl_deviceid=deviceid:deviceid
tmpl_orgid=orgid:orgid
tmpl_mask=mask
tmpl_string=string
tmpl_serial=serial
tmpl_hostmaster=hostmaster
tmpl_expiry=expiry
tmpl_leasetime=lease time
tmpl_csa=CSA
tmpl_menu_text=menu text
tmpl_base_name=base name
tmpl_boot_service_type=boot service type
tmpl_prompt=prompt
tmpl_uid=uid
tmpl_alias=alias
tmpl_circuitid=circuit-id
tmpl_remoteid=remote-id
tmpl_subscriberid=subscriber-id

# DNS-specific settings
index_dns_settings=DNS settings
index_dns_settings_basic=Basic DNS settings
index_dns_servers=DNS Servers
index_dns_iface_settings=Network Interface Settings
index_dns_alias_settings=Alias / Redirect Settings
index_dns_records_settings=Filtering & DNS Records Settings
index_dns_ipset=Ipsets
index_dns_connmark=Linux Connection tracking marks
index_dns_records=DNS Records
index_dns_sec_settings=DNS Security Settings
index_dns_auth_settings=Authoritative DNS Settings
index_dns_addn_config=Additional Configuration Files
index_dns_config_edit=Edit config files
index_dns_scripts_edit=Edit script files
index_dns_control=Service Control
index_dns_view_log=View Logfile
index_dns_configuration_errors=Configuration Errors

dns_disabled=DNS Disabled
dns_disabled_help=DNS server disabled: Port must be &gt; 0
manual_file=Edit File:
manual_econffile=Invalid configuration file
manual_escriptfile=Invalid script file
_file=File
_dir=Directory
_addr=address
_iface=interface
_upstream_srv=upstream DNS server
_listen=listen address
_alias=IP address alias
_nx=aliased NXDOMAIN response
_domain=Domain
_hostsfile=hosts file
_hostsdir=hosts directory
_resolvfile=resolv file
_connmark=Connmark filter

# Property labels/descriptions
p_man_desc_no_hosts=Don&#39;t read the hostnames in /etc/hosts.
p_man_desc_addn_hosts=Additional hosts file. Read the specified file as well as /etc/hosts. If 'no-hosts' is given, read only the specified file. This option may be repeated for more than one additional hosts file. If a directory is given, then read all the files contained in that directory in alphabetical order.
p_man_desc_hostsdir=Read all the hosts files contained in the directory. New or changed files are read automatically. See 'dhcp-hostsdir' for details.
p_man_desc_expand_hosts=Add the domain to simple names (without a period) in /etc/hosts in the same way as for DHCP-derived names. Note that this does not apply to domain names in cnames, PTR records, TXT records etc.
p_man_desc_local_ttl=When replying with information from /etc/hosts or configuration or the DHCP leases file dnsmasq by default sets the time-to-live field to zero, meaning that the requester should not itself cache the information. This is the correct thing to do in almost all situations. This option allows a time-to-live (in seconds) to be given for these replies. This will reduce the load on the server at the expense of clients using stale data under some circumstances.
p_man_desc_dhcp_ttl=As for 'local-ttl', but affects only replies with information from DHCP leases. If both are given, 'dhcp-ttl' applies for DHCP information, and 'local-ttl' for others. Setting this to zero eliminates the effect of 'local-ttl' for DHCP.
p_man_desc_neg_ttl=Negative replies from upstream servers normally contain time-to-live information in SOA records which dnsmasq uses for caching. If the replies from upstream servers omit this information, dnsmasq does not cache the reply. This option gives a default value for time-to-live (in seconds) which dnsmasq uses to cache negative replies even in the absence of an SOA record.
p_man_desc_max_ttl=Set a maximum TTL value that will be handed out to clients. The specified maximum TTL will be given to clients instead of the true TTL value if it is lower. The true TTL value is however kept in the cache to avoid flooding the upstream DNS servers.
p_man_desc_max_cache_ttl=Set a maximum TTL value for entries in the cache.
p_man_desc_min_cache_ttl=Extend short TTL values to the time given when caching them. Note that artificially extending TTL values is in general a bad idea, do not do it unless you have a good reason, and understand what you are doing. Dnsmasq limits the value of this option to one hour, unless recompiled.
p_man_desc_auth_ttl=Set the TTL value returned in answers from the authoritative server.
p_man_desc_keep_in_foreground=Do not go into the background at startup but otherwise run as normal. This is intended for use when dnsmasq is run under daemontools or launchd.
p_man_desc_no_daemon=Debug mode: don&#39;t fork to the background, don&#39;t write a pid file, don&#39;t change user id, generate a complete cache dump on receipt on SIGUSR1, log to stderr as well as syslog, don&#39;t fork new processes to handle TCP queries. Note that this option is for use in debugging only, to stop dnsmasq daemonising in production, use 'keep-in-foreground'.
p_man_desc_log_queries=Log the results of DNS queries handled by dnsmasq. Enable a full cache dump on receipt of SIGUSR1. If the argument &quot;extra&quot; is supplied, ie 'log-queries=extra' then the log has extra information at the start of each line. This consists of a serial number which ties together the log lines associated with an individual query, and the IP address of the requestor.
p_man_desc_log_facility=Set the facility to which dnsmasq will send syslog entries, this defaults to DAEMON, and to LOCAL0 when debug mode is in operation. If the facility given contains at least one '/' character, it is taken to be a filename, and dnsmasq logs to the given file, instead of syslog. If the facility is '-' then dnsmasq logs to stderr. (Errors whilst reading configuration will still go to syslog, but all output from a successful startup, and all output whilst running, will go exclusively to the file.) When logging to a file, dnsmasq will close and reopen the file when it receives SIGUSR2. This allows the log file to be rotated without stopping dnsmasq.
p_man_desc_log_debug=Enable extra logging intended for debugging rather than information.
p_man_desc_log_async=Enable asynchronous logging and optionally set the limit on the number of lines which will be queued by dnsmasq when writing to the syslog is slow. Dnsmasq can log asynchronously: this allows it to continue functioning without being blocked by syslog, and allows syslog to use dnsmasq for DNS queries without risking deadlock. If the queue of log-lines becomes full, dnsmasq will log the overflow, and the number of messages lost. The default queue length is 5, a sane value would be 5-25, and a maximum limit of 100 is imposed.
p_man_desc_pid_file=Specify an alternate path for dnsmasq to record its process-id in. Normally /var/run/dnsmasq.pid.
p_man_desc_user=Specify the userid to which dnsmasq will change after startup. Dnsmasq must normally be started as root, but it will drop root privileges after startup by changing id to another user. Normally this user is &quot;nobody&quot; but that can be over-ridden with this switch.
p_man_desc_group=Specify the group which dnsmasq will run as. The default is &quot;dip&quot;, if available, to facilitate access to /etc/ppp/resolv.conf which is not normally world readable.
p_man_desc_version=Print the version number.
p_man_desc_port=Listen on &amp;lt;port&gt; instead of the standard DNS port (53). Setting this to zero completely disables DNS function, leaving only DHCP and/or TFTP.
p_man_desc_edns_packet_max=Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder. Defaults to 1232, which is the recommended size following the DNS flag day in 2020. Only increase if you know what you are doing.
p_man_desc_query_port=Send outbound DNS queries from, and listen for their replies on, the specific UDP port &amp;lt;query_port&gt; instead of using random ports. NOTE that using this option will make dnsmasq less secure against DNS spoofing attacks but it may be faster and use less resources. Setting this option to zero makes dnsmasq use a single port allocated to it by the OS: this was the default behaviour in versions prior to 2.43.
p_man_desc_min_port=Do not use ports less than that given as source for outbound DNS queries. Dnsmasq picks random ports as source for outbound queries: when this option is given, the ports used will always be larger than that specified. Useful for systems behind firewalls. If not specified, defaults to 1024.
p_man_desc_max_port=Use ports lower than that given as source for outbound DNS queries. Dnsmasq picks random ports as source for outbound queries: when this option is given, the ports used will always be lower than that specified. Useful for systems behind firewalls.
p_man_desc_interface=Listen only on the specified interface(s). Dnsmasq automatically adds the loopback (local) interface to the list of interfaces to use when the 'interface' option is used. If no 'interface' or 'listen-address' options are given dnsmasq listens on all available interfaces except any given in 'except-interface' options. On Linux, when 'bind-interfaces' or 'bind-dynamic' are in effect, IP alias interface labels (eg &quot;eth1:0&quot;) are checked, rather than interface names. In the degenerate case when an interface has one address, this amounts to the same thing but when an interface has multiple addresses it allows control over which of those addresses are accepted. The same effect is achievable in default mode by using 'listen-address'. A simple wildcard, consisting of a trailing '*', can be used in 'interface' and 'except-interface' options.
p_man_desc_except_interface=Do not listen on the specified interface. Note that the order of 'listen-address', 'interface', and 'except-interface' options does not matter and that 'except-interface' options always override the others. The comments about interface labels for 'listen-address' apply here.
p_man_desc_auth_server=Enable DNS authoritative mode for queries arriving at an interface or address. Note that the interface or address need not be mentioned in 'interface' or 'listen-address' configuration, indeed 'auth-server' will override these and provide a different DNS service on the specified interface. The &amp;lt;domain&gt; is the &quot;glue record&quot;. It should resolve in the global DNS to an A and/or AAAA record which points to the address dnsmasq is listening on. When an interface is specified, it may be qualified with &quot;/4&quot; or &quot;/6&quot; to specify only the IPv4 or IPv6 addresses associated with the interface. Since any defined authoritative zones are also available as part of the normal recusive DNS service supplied by dnsmasq, it can make sense to have an 'auth-server' declaration with no interfaces or address, but simply specifying the primary external nameserver.
p_man_desc_local_service=Accept DNS queries only from hosts whose address is on a local subnet, ie a subnet for which an interface exists on the server. This option only has effect if there are no 'interface', 'except-interface', 'listen-address' or 'auth-server' options. It is intended to be set as a default on installation, to allow unconfigured installations to be useful but also safe from being used for DNS amplification attacks.
p_man_desc_no_dhcp_interface=Do not provide DHCP or TFTP on the specified interface, but do provide DNS service.
p_man_desc_listen_address=Listen on the given IP address(es). Both 'interface' and 'listen-address' options may be given, in which case the set of both interfaces and addresses is used. Note that if no 'interface' option is given, but 'listen-address' is, dnsmasq will not automatically listen on the loopback interface. To achieve this, its IP address, 127.0.0.1, must be explicitly given as a 'listen-address' option.
p_man_desc_bind_interfaces=On systems which support it, dnsmasq binds the wildcard address, even when it is listening on only some interfaces. It then discards requests that it shouldn&#39;t reply to. This has the advantage of working even when interfaces come and go and change address. This option forces dnsmasq to really bind only the interfaces it is listening on. About the only time when this is useful is when running another nameserver (or another instance of dnsmasq) on the same machine. Setting this option also enables multiple instances of dnsmasq which provide DHCP service to run in the same machine.
p_man_desc_bind_dynamic=Enable a network mode which is a hybrid between 'bind-interfaces' and the default. Dnsmasq binds the address of individual interfaces, allowing multiple dnsmasq instances, but if new interfaces or addresses appear, it automatically listens on those (subject to any access-control configuration). This makes dynamically created interfaces work in the same way as the default. Implementing this option requires non-standard networking APIs and it is only available under Linux. On other platforms it falls-back to 'bind-interfaces' mode.
p_man_desc_localise_queries=Return answers to DNS queries from /etc/hosts and 'interface-name' and 'dynamic-host' which depend on the interface over which the query was received. If a name has more than one address associated with it, and at least one of those addresses is on the same subnet as the interface to which the query was sent, then return only the address(es) on that subnet. This allows for a server to have multiple addresses in /etc/hosts corresponding to each of its interfaces, and hosts will get the correct address based on which network they are attached to. Currently this facility is limited to IPv4.
p_man_desc_bogus_priv=Bogus private reverse lookups. All reverse lookups for private IP ranges (ie 192.168.x.x, etc) which are not found in /etc/hosts or the DHCP leases file are answered with &quot;no such domain&quot; rather than being forwarded upstream. The set of prefixes affected is the list given in RFC6303, for IPv4 and IPv6.
p_man_desc_alias=Modify IPv4 addresses returned from upstream nameservers; old-ip is replaced by new-ip. If the optional mask is given then any address which matches the masked old-ip will be re-written. So, for instance 'alias=1.2.3.0,6.7.8.0,255.255.255.0' will map 1.2.3.56 to 6.7.8.56 and 1.2.3.67 to 6.7.8.67. This is what Cisco PIX routers call &quot;DNS doctoring&quot;. If the old IP is given as range, then only addresses in the range, rather than a whole subnet, are re-written. So 'alias=192.168.0.10-192.168.0.40,10.0.0.0,255.255.255.0' maps 192.168.0.10-&gt;192.168.0.40 to 10.0.0.10-&gt;10.0.0.40
p_man_desc_bogus_nxdomain=Transform replies which contain the specified address or subnet into &quot;No such domain&quot; replies. IPv4 and IPv6 are supported. This is intended to counteract a devious move made by Verisign in September 2003 when they started returning the address of an advertising web page in response to queries for unregistered names, instead of the correct NXDOMAIN response. This option tells dnsmasq to fake the correct response when it sees this behaviour. As at Sept 2003 the IP address being returned by Verisign is 64.94.110.11
p_man_desc_ignore_address=Ignore replies to A or AAAA queries which include the specified address or subnet. No error is generated, dnsmasq simply continues to listen for another reply. This is useful to defeat blocking strategies which rely on quickly supplying a forged answer to a DNS request for certain domain, before the correct answer can arrive.
p_man_desc_filterwin2k=Later versions of windows make periodic DNS requests which don&#39;t get sensible answers from the public DNS and can cause problems by triggering dial-on-demand links. This flag turns on an option to filter such requests. The requests blocked are for records of types SOA and SRV, and type ANY where the requested name has underscores, to catch LDAP requests.
p_man_desc_resolv_file=Read the IP addresses of the upstream nameservers from &amp;lt;file&gt;, instead of /etc/resolv.conf. For the format of this file see resolv.conf(5). The only lines relevant to dnsmasq are nameserver ones. Dnsmasq can be told to poll more than one resolv.conf file, the first file name specified overrides the default, subsequent ones add to the list. This is only allowed when polling; the file with the currently latest modification time is the one used.
p_man_desc_no_resolv=Don&#39;t read /etc/resolv.conf. Get upstream servers only from the command line or the dnsmasq configuration file.
p_man_desc_enable_dbus=Allow dnsmasq configuration to be updated via DBus method calls. The configuration which can be changed is upstream DNS servers (and corresponding domains) and cache clear. Requires that dnsmasq has been built with DBus support. If the service name is given, dnsmasq provides service at that name, rather than the default which is uk.org.thekelleys.dnsmasq
p_man_desc_enable_ubus=Enable dnsmasq UBus interface. It sends notifications via UBus on DHCPACK and DHCPRELEASE events. Furthermore it offers metrics and allows configuration of Linux connection track mark based filtering. When DNS query filtering based on Linux connection track marks is enabled UBus notifications are generated for each resolved or filtered DNS query. Requires that dnsmasq has been built with UBus support. If the service name is given, dnsmasq provides service at that namespace, rather than the default which is dnsmasq
p_man_desc_strict_order=By default, dnsmasq will send queries to any of the upstream servers it knows about and tries to favour servers that are known to be up. Setting this flag forces dnsmasq to try each query with each server strictly in the order they appear in /etc/resolv.conf
p_man_desc_all_servers=By default, when dnsmasq has more than one upstream server available, it will send queries to just one server. Setting this flag forces dnsmasq to send all queries to all available servers. The reply from the server which answers first will be returned to the original requester.
p_man_desc_dns_loop_detect=Enable code to detect DNS forwarding loops; ie the situation where a query sent to one of the upstream server eventually returns as a new query to the dnsmasq instance. The process works by generating TXT queries of the form &amp;lt;hex&gt;.test and sending them to each upstream server. The hex is a UID which encodes the instance of dnsmasq sending the query and the upstream server to which it was sent. If the query returns to the server which sent it, then the upstream server through which it was sent is disabled and this event is logged. Each time the set of up‐ stream servers changes, the test is re-run on all of them, including ones which were previously disabled.
p_man_desc_stop_dns_rebind=Reject (and log) addresses from upstream nameservers which are in the private ranges. This blocks an attack where a browser behind a firewall is used to probe machines on the local network. For IPv6, the private range covers the IPv4-mapped addresses in private space plus all link-local (LL) and site-local (ULA) addresses.
p_man_desc_rebind_localhost_ok=Exempt 127.0.0.0/8 and ::1 from rebinding checks. This address range is returned by realtime black hole servers, so blocking it may disable these services.
p_man_desc_rebind_domain_ok=Do not detect and block dns-rebind on queries to these domains. The argument may be either a single domain, or multiple domains surrounded by '/', like the 'server' syntax, eg. 'rebind-domain-ok=/domain1/domain2/domain3/'
p_man_desc_no_poll=Don&#39;t poll /etc/resolv.conf for changes.
p_man_desc_clear_on_reload=Whenever /etc/resolv.conf is re-read or the upstream servers are set via DBus, clear the DNS cache. This is useful when new nameservers may have different data than that held in cache.
p_man_desc_domain_needed=Tells dnsmasq to never forward A or AAAA queries for plain names, without dots or domain parts, to upstream nameservers. If the name is not known from /etc/hosts or DHCP then a &quot;not found&quot; answer is returned.
p_man_desc_local=Specify IP address of upstream servers directly. Setting this flag does not suppress reading of /etc/resolv.conf, use 'no-resolv' to do that. If one or more optional domains are given, that server is used only for those domains and they are queried only using the specified server. This is intended for private nameservers: if you have a nameserver on your network which deals with names of the form xxx.internal.thekelleys.org.uk at 192.168.1.1 then giving the flag 'server=/internal.thekelleys.org.uk/192.168.1.1' will send all queries for internal machines to that nameserver, everything else will go to the servers in /etc/resolv.conf. DNSSEC validation is turned off for such private nameservers, UNLESS a 'trust-anchor' is specified for the domain in question. An empty domain specification, // has the special meaning of &quot;unqualified names only&quot; ie names without any dots in them. A non-standard port may be specified as part of the IP address using a # character. More than one 'server' flag is allowed, with repeated domain or ipaddr parts as required.
p_man_desc_server=Specify IP address of upstream servers directly. Setting this flag does not suppress reading of /etc/resolv.conf, use 'no-resolv' to do that. If one or more optional domains are given, that server is used only for those domains and they are queried only using the specified server. This is intended for private nameservers: if you have a nameserver on your network which deals with names of the form xxx.internal.thekelleys.org.uk at 192.168.1.1 then giving the flag 'server=/internal.thekelleys.org.uk/192.168.1.1' will send all queries for internal machines to that nameserver, everything else will go to the servers in /etc/resolv.conf. DNSSEC validation is turned off for such private nameservers, UNLESS a 'trust-anchor' is specified for the domain in question. An empty domain specification, // has the special meaning of &quot;unqualified names only&quot; ie names without any dots in them. A non-standard port may be specified as part of the IP address using a # character. More than one 'server' flag is allowed, with repeated domain or ipaddr parts as required.
p_man_desc_rev_server=This is functionally the same as 'server', but provides some syntactic sugar to make specifying address-to-name queries easier. For example 'rev-server=1.2.3.0/24,192.168.0.1' is exactly equivalent to 'server=/3.2.1.in-addr.arpa/192.168.0.1'
p_man_desc_address=Specify an IP address to return for any host in the given domains. Queries in the domains are never forwarded and always replied to with the specified IP address which may be IPv4 or IPv6. To give both IPv4 and IPv6 addresses for a domain, use repeated 'address' flags. To include multiple IP addresses for a single query, use 'addn-hosts= &amp;lt;path&gt; ' instead. Note that /etc/hosts and DHCP leases override this for individual names. A common use of this is to redirect the entire doubleclick.net domain to some friendly local web server to avoid banner ads. The domain specification works in the same way as for 'server', with the additional facility that /#/ matches any domain. Thus 'address=/#/1.2.3.4' will always return 1.2.3.4 for any query not answered from /etc/hosts or DHCP and not sent to an upstream nameserver by a more specific 'server' directive. As for 'server', one or more domains with no address returns a no-such-domain answer, so 'address=/example.com/' is equivalent to 'server=/example.com/' and returns NXDOMAIN for example.com and all its subdomains. An address specified as '#' translates to the NULL address of 0.0.0.0 and its IPv6 equivalent of :: so 'address=/example.com/#' will return NULL addresses for example.com and its subdomains. This is partly syntactic sugar for 'address=/example.com/0.0.0.0' and 'address=/example.com/::' but is also more efficient than including both as separate configuration lines. Note that NULL addresses normally work in the same way as localhost, so beware that clients looking up these names are likely to end up talking to themselves.
p_man_desc_ipset=Places the resolved IP addresses of queries for one or more domains in the specified Netfilter IP set. If multiple setnames are given, then the addresses are placed in each of them, subject to the limitations of an IP set (IPv4 addresses cannot be stored in an IPv6 IP set and vice versa). Domains and subdomains are matched in the same way as 'address'. These IP sets must already exist. See ipset(8) for more details.
p_man_desc_connmark_allowlist_enable=Enables filtering of incoming DNS queries with associated Linux connection track marks according to individual allowlists configured via a series of 'connmark-allowlist' options. Disallowed queries are not forwarded; they are rejected with a REFUSED error code. DNS queries are only allowed if they do not have an associated Linux connection track mark, or if the queried domains match the configured DNS patterns for the as‐ sociated Linux connection track mark. If no allowlist is configured for a Linux connection track mark, all DNS queries associated with that mark are rejected. If a mask is specified, Linux connection track marks are first bitwise ANDed with the given mask before being processed.
p_man_desc_connmark_allowlist=Configures the DNS patterns that are allowed in DNS queries associated with the given Linux connection track mark. If a mask is specified, Linux connection track marks are first bitwise ANDed with the given mask before they are compared to the given connection track mark. Patterns follow the syntax of DNS names, but additionally allow the wildcard character &quot;*&quot; to be used up to twice per label to match 0 or more characters within that label. Note that the wildcard never matches a dot (e.g., &quot;*.example.com&quot; matches &quot;api.example.com&quot; but not &quot;api.us.example.com&quot;). Patterns must be fully qualified, i.e., consist of at least two labels. The final label must not be fully numeric, and must not be the &quot;local&quot; pseudo-TLD. A pattern must end with at least two literal (non-wildcard) labels. Instead of a pattern, &quot;*&quot; can be specified to disable allowlist filtering for a given Linux connection track mark entirely.
p_man_desc_mx_host=Return an MX record named &amp;lt;mx name&gt; pointing to the given hostname (if given), or the host specified in the 'mx-target' switch or, if that switch is not given, the host on which dnsmasq is running. The default is useful for directing mail from systems on a LAN to a central server. The preference value is optional, and defaults to 1 if not given. More than one MX record may be given for a host.
p_man_desc_mx_target=Specify the default target for the MX record returned by dnsmasq. See 'mx-host'. If 'mx-target' is given, but not 'mx-host', then dnsmasq returns a MX record containing the MX target for MX queries on the hostname of the machine on which dnsmasq is running.
p_man_desc_selfmx=Return an MX record pointing to itself for each local machine. Local machines are those in /etc/hosts or with DHCP leases.
p_man_desc_localmx=Return an MX record pointing to the host given by 'mx-target' (or the machine on which dnsmasq is running) for each local machine. Local machines are those in /etc/hosts or with DHCP leases.
p_man_desc_srv_host=Return a SRV DNS record. See RFC2782 for details. If not supplied, the domain defaults to that given by 'domain'. The default for the target domain is empty, and the default for port is one and the defaults for weight and priority are zero. Be careful if transposing data from BIND zone files: the port, weight and priority numbers are in a different order. More than one SRV record for a given service/domain is allowed, all that match are returned.
p_man_desc_host_record=Add A, AAAA and PTR records to the DNS. This adds one or more names to the DNS with associated IPv4 (A) and IPv6 (AAAA) records. A name may appear in more than one 'host-record' and therefore be assigned more than one address. Only the first address creates a PTR record linking the address to the name. This is the same rule as is used reading hosts-files. 'host-record' options are considered to be read before host-files, so a name appearing there inhibits PTR-record creation if it appears in hosts-file also. Unlike hosts-files, names are not expanded, even when 'expand-hosts' is in effect. Short and long names may appear in the same 'host-record', eg. 'host-record=laptop,laptop.thekelleys.org,192.168.0.1,1234::100'
p_man_desc_dynamic_host=Add A, AAAA and PTR records to the DNS in the same subnet as the specified interface. The address is derived from the network part of each address associated with the interface, and the host part from the specified address. For example 'dynamic-host=example.com,0.0.0.8,eth0' will, when eth0 has the address 192.168.78.x and netmask 255.255.255.0 give the name example.com an A record for 192.168.78.8. The same principle applies to IPv6 addresses. Note that if an interface has more than one address, more than one A or AAAA record will be created. The TTL of the records is always zero, and any changes to interface addresses will be immediately reflected in them.
p_man_desc_txt_record=Return a TXT DNS record. The value of TXT record is a set of strings, so any number may be included, delimited by commas; use quotes to put commas into a string. Note that the maximum length of a single string is 255 characters, longer strings are split into 255 character chunks.
p_man_desc_ptr_record=Return a PTR DNS record.
p_man_desc_naptr_record=Return an NAPTR DNS record, as specified in RFC3403.
p_man_desc_caa_record=Return a CAA DNS record, as specified in RFC6844.
p_man_desc_cname=Return a CNAME record which indicates that &amp;lt;cname&gt; is really &amp;lt;target&gt;. There is a significant limitation on the target; it must be a DNS record which is known to dnsmasq and NOT a DNS record which comes from an upstream server. The cname must be unique, but it is permissible to have more than one cname pointing to the same target. Indeed it&#39;s possible to declare multiple cnames to a target in a single line, like so: 'cname=cname1,cname2,target'
p_man_desc_dns_rr=Return an arbitrary DNS Resource Record. The number is the type of the record (which is always in the C_IN class). The value of the record is given by the hex data, which may be of the form 01:23:45 or 01 23 45 or 012345 or any mixture of these.
p_man_desc_interface_name=Return DNS records associating the name with the address(es) of the given interface. This flag specifies an A or AAAA record for the given name in the same way as an /etc/hosts line, except that the address is not constant, but taken from the given interface. The interface may be followed by &quot;/4&quot; or &quot;/6&quot; to specify that only IPv4 or IPv6 addresses of the interface should be used. If the interface is down, not configured or non-existent, an empty record is returned. The matching PTR record is also created, mapping the interface address to the name. More than one name may be associated with an interface address by repeating the flag; in that case the first instance is used for the reverse address-to-name mapping. Note that a name used in 'interface-name' may not appear in /etc/hosts.
p_man_desc_synth_domain=Create artificial A/AAAA and PTR records for an address range. The records either seqential numbers or the address, with periods (or colons for IPv6) replaced with dashes.
p_man_desc_dumpfile=Specify the location of a pcap-format file which dnsmasq uses to dump copies of network packets for debugging purposes. If the file exists when dnsmasq starts, it is not deleted; new packets are added to the end.
p_man_desc_dumpmask=Specify which types of packets should be added to the dumpfile. The argument should be the OR of the bitmasks for each type of packet to be dumped: it can be specified in hex by preceding the number with 0x in the normal way. Each time a packet is written to the dumpfile, dnsmasq logs the packet sequence and the mask representing its type. The current types are: 0x0001 - DNS queries from clients 0x0002 DNS replies to clients 0x0004 - DNS queries to upstream 0x0008 - DNS replies from upstream 0x0010 - queries send upstream for DNSSEC validation 0x0020 - replies to queries for DNSSEC validation 0x0040 - replies to client queries which fail DNSSEC validation 0x0080 replies to queries for DNSSEC validation which fail validation.
p_man_desc_add_mac=Add the MAC address of the requestor to DNS queries which are forwarded upstream. This may be used to DNS filtering by the upstream server. The MAC address can only be added if the requestor is on the same subnet as the dnsmasq server. Note that the mechanism used to achieve this (an EDNS0 option) is not yet standardised, so this should be considered experimental. Also note that exposing MAC addresses in this way may have security and privacy implications. The warning about caching given for 'add-subnet' applies to 'add-mac' too. An alternative encoding of the MAC, as base64, is enabled by adding the &quot;base64&quot; parameter and a human-readable encoding of hex-and-colons is enabled by added the &quot;text&quot; parameter.
p_man_desc_add_cpe_id=Add an arbitrary identifying string to DNS queries which are forwarded upstream.
p_man_desc_add_subnet=Add a subnet address to the DNS queries which are forwarded upstream. If an address is specified in the flag, it will be used, otherwise, the address of the requestor will be used. The amount of the address forwarded depends on the prefix length parameter: 32 (128 for IPv6) forwards the whole address, zero forwards none of it but still marks the request so that no upstream nameserver will add client address information either. The default is zero for both IPv4 and IPv6. Note that upstream nameservers may be configured to return different results based on this information, but the dnsmasq cache does not take account. Caching is therefore disabled for such replies, unless the subnet address being added is constant.
p_man_desc_umbrella=Embeds the requestor&#39;s IP address in DNS queries forwarded upstream. If device id or organization id are specified, the information is included in the forwarded queries and may be able to be used in filtering policies and reporting. The order of the deviceid and orgid attributes is irrelevant, but must be separated by a comma.
p_man_desc_cache_size=Set the size of dnsmasq&#39;s cache. The default is 150 names. Setting the cache size to zero disables caching. Note: huge cache size impacts performance.
p_man_desc_no_negcache=Disable negative caching. Negative caching allows dnsmasq to remember &quot;no such domain&quot; answers from upstream nameservers and answer identical queries without forwarding them again.
p_man_desc_dns_forward_max=Set the maximum number of concurrent DNS queries. The default value is 150, which should be fine for most setups. The only known situation where this needs to be increased is when using web-server log file resolvers, which can generate large numbers of concurrent queries. This parameter actually controls the number of concurrent queries per server group, where a server group is the set of server(s) associated with a single domain. So if a domain has it&#39;s own server via 'server=/example.com/1.2.3.4' and 1.2.3.4 is not responding, but queries for *.example.com cannot go elsewhere, then other queries will not be affected. On configurations with many such server groups and tight resources, this value may need to be reduced.
p_man_desc_dnssec=Validate DNS replies and cache DNSSEC data. When forwarding DNS queries, dnsmasq requests the DNSSEC records needed to validate the replies. The replies are validated and the result returned as the Authenticated Data bit in the DNS packet. In addition the DNSSEC records are stored in the cache, making validation by clients more efficient. Note that validation by clients is the most secure DNSSEC mode, but for clients unable to do validation, use of the AD bit set by dnsmasq is useful, provided that the network between the dnsmasq server and the client is trusted. Dnsmasq must be compiled with HAVE_DNSSEC enabled, and DNSSEC trust anchors provided, see 'trust-anchor'. Because the DNSSEC validation process uses the cache, it is not permitted to reduce the cache size below the default when DNSSEC is enabled. The nameservers upstream of dnsmasq must be DNSSEC-capable, ie capable of returning DNSSEC records with data. If they are not, then dnsmasq will not be able to determine the trusted status of answers and this means that DNS service will be entirely broken.
p_man_desc_trust_anchor=Provide DS records to act a trust anchors for DNSSEC validation. Typically these will be the DS record(s) for Key Signing key(s) (KSK) of the root zone, but trust anchors for limited domains are also possible. The current root-zone trust anchors may be downloaded from https://data.iana.org/root-anchors/root-anchors.xml
p_man_desc_dnssec_check_unsigned=As a default, dnsmasq checks that unsigned DNS replies are legitimate: this entails possible extra queries even for the majority of DNS zones which are not, at the moment, signed. If 'dnssec-check-unsigned=no' appears in the configuration, then such replies they are assumed to be valid and passed on (without the &quot;authentic data&quot; bit set, of course). This does not protect against an attacker forging unsigned replies for signed DNS zones, but it is fast.
p_man_desc_dnssec_no_timecheck=DNSSEC signatures are only valid for specified time windows, and should be rejected outside those windows. This generates an interesting chicken-and-egg problem for machines which don&#39;t have a hardware real time clock. For these machines to determine the correct time typically requires use of NTP and therefore DNS, but validating DNS requires that the correct time is already known. Setting this flag removes the time-window checks (but not other DNSSEC validation.) only until the dnsmasq process receives SIGINT. The intention is that dnsmasq should be started with this flag when the platform determines that reliable time is not currently available. As soon as reliable time is established, a SIGINT should be sent to dnsmasq, which enables time checking, and purges the cache of DNS records which have not been thoroughly checked.
p_man_desc_dnssec_timestamp=Enables an alternative way of checking the validity of the system time for DNSSEC (see 'dnssec-no-timecheck'). In this case, the system time is considered to be valid once it becomes later than the timestamp on the specified file. The file is created and its timestamp set automatically by dnsmasq. The file must be stored on a persistent filesystem, so that it and its mtime are carried over system restarts. The timestamp file is created after dnsmasq has dropped root, so it must be in a location writable by the unprivileged user that dnsmasq runs as.
p_man_desc_proxy_dnssec=Copy the DNSSEC Authenticated Data bit from upstream servers to downstream clients. This is an alternative to having dnsmasq validate DNSSEC, but it depends on the security of the network between dnsmasq and the upstream servers, and the trustworthiness of the upstream servers. Note that caching the Authenticated Data bit correctly in all cases is not technically possible. If the AD bit is to be relied upon when using this option, then the cache should be disabled using 'cache-size=0'. In most cases, enabling DNSSEC validation within dnsmasq is a better option. See 'dnssec' for details.
p_man_desc_dnssec_debug=Set debugging mode for the DNSSEC validation, set the Checking Disabled bit on upstream queries, and don&#39;t convert replies which do not validate to responses with a return code of SERVFAIL. Note that setting this may affect DNS behaviour in bad ways, it is not an extra-logging flag and should not be set in production.
p_man_desc_auth_zone=Define a DNS zone for which dnsmasq acts as authoritative server. Locally defined DNS records which are in the domain will be served. If subnet(s) are given, A and AAAA records must be in one of the specified subnets. As alternative to directly specifying the subnets, it's possible to give the name of an interface, in which case the subnets implied by that interface's configured addresses and netmask/prefix-length are used; this is useful when using constructed DHCP ranges as the actual address is dynamic and not known when configuring dnsmasq. The interface addresses may be confined to only IPv6 addresses using &amp;lt;interface&gt;/6 or to only IPv4 using &amp;lt;interface&gt;/4. This is useful when an interface has dynamically determined global IPv6 addresses which should appear in the zone, but RFC1918 IPv4 addresses which should not. Interface-name and address-literal subnet specifications may be used freely in the same 'auth-zone' declaration. It's possible to exclude certain IP addresses from responses. It can be used, to make sure that answers contain only global routeable IP addresses (by excluding loopback, RFC1918 and ULA addresses). The subnet(s) are also used to define in-addr.arpa and ip6.arpa domains which are served for reverse-DNS queries. If not specified, the prefix length  defaults  to 24 for IPv4 and 64 for IPv6.  For IPv4 subnets, the prefix length should be have the value 8, 16 or 24 unless you are familiar with RFC 2317 and have arranged the in-addr.arpa delegation accordingly. Note that if no subnets are specified, then no reverse queries are answered.
p_man_desc_auth_soa=Specify fields in the SOA record associated with authoritative zones. Note that this is optional, all the values are set to sane defaults.
p_man_desc_auth_sec_servers=Specify any secondary servers for a zone for which dnsmasq is authoritative. These servers must be configured to get zone data from dnsmasq by zone transfer, and answer queries for the same authoritative zones as dnsmasq.
p_man_desc_auth_peer=Specify the addresses of secondary servers which are allowed to initiate zone transfer (AXFR) requests for zones for which dnsmasq is authoritative. If this option is not given but 'auth-sec-servers' is, then AXFR requests will be accepted from any secondary. Specifying 'auth-peer' without 'auth-sec-servers' enables zone transfer but does not advertise the secondary in NS records returned by dnsmasq.
p_man_desc_conntrack=Read the Linux connection track mark associated with incoming DNS queries and set the same mark value on upstream traffic used to answer those queries. This allows traffic generated by dnsmasq to be associated with the queries which cause it, useful for bandwidth accounting and firewalling. Dnsmasq must have conntrack support compiled in and the kernel must have conntrack support included and configured. This option cannot be combined with 'query-port'.
p_man_desc_conf_file=Specify a configuration file. The presence of this option stops dnsmasq from reading the default configuration file (normally /etc/dnsmasq.conf). Multiple files may be specified by repeating the option either on the command line or in configuration files. A filename of &quot;-&quot; causes dnsmasq to read configuration from stdin.
p_man_desc_conf_dir=Read all the files in the given directory as configuration files. If extension(s) are given, any files which end in those extensions are skipped. Any files whose names end in ~ or start with . or start and end with # are always skipped. If the extension starts with * then only files which have that extension are loaded. So 'conf-dir=/path/to/dir,*.conf' loads all files with the suffix .conf in /path/to/dir. This flag may be given on the command line or in a configuration file. If giving it on the command line, be sure to escape * characters. Files are loaded in alphabetical order of filename.
p_man_desc_servers_file=A special case of 'conf-file' which differs in two respects. Firstly, only 'server' and 'rev-server' are allowed in the configuration file included. Secondly, the file is re-read and the configuration therein is updated when dnsmasq receives SIGHUP.

p_desc_no_hosts=Don&#39;t read the hostnames in /etc/hosts
p_desc_addn_hosts=Additional hosts file(s)
p_desc_hostsdir=Additional hosts file directories
p_desc_resolv_file=Alternate 'resolv' file(s)
p_desc_conf_file=Additional configuration files
p_desc_conf_dir=Additional configuration directories
p_desc_conf_dir_filter=Only read files ending with
p_desc_conf_dir_exceptions=Do not read files ending with
p_desc_alias=Aliased IP addresses
p_desc_bogus_nxdomain=Aliased NXDOMAIN IP addresses
p_desc_address=Domain-mapped IP addresses
p_desc_ignore_address=Ignore IP addresses
p_desc_interface=Listen Interface(s)
p_desc_except_interface=Except Interface(s)
p_desc_listen_address=Listen Address(es)
p_desc_no_dhcp_interface=DNS-only Listen Interface(s)
p_desc_bind_interfaces=Bind to interfaces
p_desc_expand_hosts=Add the domain to simple names (without a period) in /etc/hosts
p_desc_cache_size=Custom DNS cache size
p_desc_local_ttl=Allow a time-to-live (in seconds) to be given for replying with information from /etc/hosts or configuration or the DHCP leases file
p_desc_server=DNS Upstream Servers
p_desc_rev_server=DNS Upstream Servers (Reverse Domain)
p_desc_servers_file=Additional configuration files (only 'server' and 'rev-server')
p_desc_ipset=Domain(s) IPs to Netfilter Ipset(s)
p_desc_connmark_allowlist=Linux connection tracking mark-based DNS filter(s)

p_label_no_hosts=Don&#39;t read the hostnames in /etc/hosts
p_label_hostsdir=Read all the hosts files contained in the directory
p_label_dhcp_ttl=As for local-ttl, but affects only replies with information from DHCP leases
p_label_neg_ttl=Negative reply TTL
p_label_max_ttl=Maximum TTL value that will be handed out to clients
p_label_max_cache_ttl=Maximum TTL value for entries in the cache
p_label_min_cache_ttl=Extend short TTL values to the time given when caching them
p_label_auth_ttl=TTL value returned in answers from the authoritative server
p_label_log_facility=Facility to which dnsmasq will send syslog entries
p_label_log_debug=Enable extra logging intended for debugging rather than information
p_label_log_async=Enable asynchronous logging
p_label_conf_file=Filename
p_label_conf_dir=Directory
p_label_port=DNS port
p_label_domain=Local domain name
p_label_domain_needed=Only forward names with a domain part
p_label_connmark_allowlist_enable=Enables filtering of incoming DNS queries with associated Linux connection track marks
p_label_bogus_priv=Allow unresolved reverse lookups on local network to propogate out
p_label_filterwin2k=Prevent windows SOA & SRV requests propogating out
p_label_no_resolv=Don&#39;t read /etc/resolv.conf
p_label_rebind_localhost_ok=Exempt 127.0.0.0/8 and ::1 from rebinding checks
p_label_rebind_domain_ok=Do not detect and block dns-rebind on queries to these domains
p_label_no_poll=Don&#39;t poll resolv.conf file
p_label_resolv_file=Non-standard resolv.conf file
p_label_strict_order=Always use nameservers in order provided
p_label_no_negcache=Do not cache negative responses
p_label_interface=Interface
p_label_bind_interfaces=Bind to individual interfaces instead of wildcard address
p_label_expand_hosts=Append domain to simple names in /etc/hosts
p_label_cache_size=DNS cache size
p_label_local_ttl=Use specified local Time-To-Live
p_label_log_queries=Log the results of DNS queries
p_label_auth_server=Enable DNS authoritative mode for queries arriving at an interface or address
p_label_local_service=Accept DNS queries only from hosts on a local subnet
p_label_pid_file=Alternate path for dnsmasq to record its process-id
p_label_user=User which dnsmasq will run as
p_label_group=Group which dnsmasq will run as
p_label_edns_packet_max=Largest EDNS.0 UDP packet supported by DNS forwarder
p_label_query_port=DNS query send/listen port
p_label_min_port=Minimum DSN query port
p_label_max_port=Maximum DSN query port
p_label_bind_dynamic=Enable a network mode which is a hybrid between 'bind-interfaces' and the default
p_label_localise_queries=Return answers to DNS queries from /etc/hosts, 'interface-name', & 'dynamic-host' which depend on the interface over which the query was received
p_label_enable_dbus=Allow dnsmasq configuration to be updated via DBus method calls
p_label_enable_ubus=Enable dnsmasq UBus interface
p_label_all_servers=Forces dnsmasq to send all queries to all available servers
p_label_dns_loop_detect=Enable code to detect DNS forwarding loops
p_label_stop_dns_rebind=Reject (and log) addresses from upstream nameservers which are in the private ranges
p_label_clear_on_reload=Clear the DNS cache whenever /etc/resolv.conf is re-read or the upstream servers are set via DBus
p_label_mx_target=Specify the default target for the MX record returned by dnsmasq
p_label_mx_host=Return an MX record named &lt;mx name&gt; pointing to the given hostname (if given), or the host specified in the 'mx-target' switch (if given), or the dnsmasq host
p_label_srv_host=Return a SRV DNS record
p_label_host_record=Add A, AAAA and PTR records to the DNS
p_label_dynamic_host=Add A, AAAA and PTR records to the DNS in the same subnet as the specified interface
p_label_txt_record=Return a TXT DNS record
p_label_ptr_record=Return a PTR DNS record
p_label_selfmx=Return an MX record pointing to itself for each local machine
p_label_localmx=Return an MX record pointing to the host given by 'mx-target' (or the dnsmasq host) for each local machine
p_label_dumpfile=Specify the location of a pcap-format file which dnsmasq uses to dump copies of network packets for debugging purposes
p_label_dumpmask=Specify which types of packets should be added to the dumpfile
p_label_add_mac=Add the MAC address of the requestor to DNS queries which are forwarded upstream
p_label_add_cpe_id=Add an arbitrary identifying string to DNS queries which are forwarded upstream
p_label_dns_forward_max=Maximum number of concurrent DNS queries
p_label_dnssec=Validate DNS replies and cache DNSSEC data
p_label_trust_anchor=Provide DS records to act a trust anchors for DNSSEC validation
p_label_naptr_record=Return an NAPTR DNS record, as specified in RFC3403
p_label_caa_record=Return a CAA DNS record, as specified in RFC6844
p_label_cname=Return a CNAME  record  which indicates that &lt;cname&gt; is really &lt;target&gt;
p_label_dns_rr=Return an arbitrary DNS Resource Record
p_label_interface_name=Return DNS records associating the name with the address(es) of the given interface
p_label_synth_domain=Create artificial A/AAAA and PTR records for an address range
p_label_dnssec_check_unsigned=If set to 'no', unsigned DNS replies are assumed to be valid and are not checked
p_label_dnssec_no_timecheck=Removes DNSSEC time-window checks (but not other DNSSEC validation)
p_label_dnssec_timestamp=Alternative way of checking the validity of the system time for DNSSEC, via the timestamp of the specified file
p_label_proxy_dnssec=Copy the DNSSEC Authenticated Data bit from upstream servers to downstream clients
p_label_dnssec_debug=Set debugging mode for the DNSSEC validation (see docs, should not be set in production!)
p_label_conntrack=Read the Linux connection track mark associated with incoming DNS queries and set the same mark value on upstream traffic used to answer those queries
p_label_servers_file=Filename
p_label_server=DNS Upstream Servers
p_label_rev_server=DNS Upstream Servers (Reverse Domain)
p_label_add_subnet=Add a subnet address to the DNS queries which are forwarded upstream
p_label_umbrella=Embeds the requestor&#39;s IP address in DNS queries forwarded upstream
p_label_auth_zone=Define a DNS zone for which dnsmasq acts as authoritative server
p_label_auth_soa=Specify fields in the SOA record associated with authoritative zones
p_label_auth_sec_servers=Specify any secondary servers for a zone for which dnsmasq is authoritative
p_label_auth_peer=Specify the addresses of secondary servers which are allowed to initiate zone transfer (AXFR) requests for zones for which dnsmasq is authoritative

# Individual value labels
p_label_val_class=Class
p_label_val_domain=Domain
p_label_val_domains=Domain(s)
p_label_val_keytag=Keytag
p_label_val_algorithm=Algorithm
p_label_val_digesttype=Digest Type
p_label_val_digest=Digest
p_label_val_directory=Directory
p_label_val_dirname=Directory name
p_label_val_filename=Filename
p_label_val_for_domain=For domain
p_label_val_for_domains=For domain(s)
p_label_val_interface_or_ip_address=Interface or IP address
p_label_val_username=Username
p_label_val_groupname=Groupname
p_label_val_port=Port
p_label_val_size=Size
p_label_val_lines=Lines
p_label_val_interface=Interface
p_label_val_interfaces=Interface(s)
p_label_val_ip_address=IP Address
p_label_val_ip_addresses=IP Address(es)
p_label_val_ttl=TTL
p_label_val_from_addresses=From address(es)
p_label_val_to_address=To address
p_label_val_netmask=Netmask
p_label_val_service_name=Service name
p_label_val_source_interface_or_address=Source interface or address
p_label_val_ipsets=Ipset(s)
p_label_val_mask=Mask
p_label_val_connmark=Connmark
p_label_val_mxname=MX Name
p_label_val_hostname=Hostname
p_label_val_preference=Preference
p_label_val_service=Service
p_label_val_protocol=Protocol
p_label_val_target=Target
p_label_val_priority=Priority
p_label_val_weight=Weight
p_label_val_name=Name
p_label_val_names=Name(s)
p_label_val_text=Text
p_label_val_order=Order
p_label_val_flags=Flags
p_label_val_regexp=Regexp
p_label_val_replacement=Replacement
p_label_val_value=Value
p_label_val_cnames=CNAME(s)
p_label_val_rrnumber=RR-Number
p_label_val_hexdata=Hex data
p_label_val_address_range=Address range
p_label_val_prefix=Prefix
p_label_val_ipv4_address=IPv4 Address
p_label_val_ipv6_address=IPv6 Address
p_label_val_deviceid=Device ID
p_label_val_orgid=Org ID
p_label_val_include_subnets_or_interfaces=Included subnet(s) or interface(s)
p_label_val_exclude_subnets_or_interfaces=Excluded subnet(s) or interface(s)
p_label_val_serial=Serial
p_label_val_hostmaster=Hostmaster
p_label_val_refresh=Refresh
p_label_val_retry=Retry
p_label_val_expiry=Expiry
p_label_val_dirname=Directory
p_label_val_filter=Filter
p_label_val_exceptions=Exceptions
p_label_val_pattern=Pattern

# DHCP settings
index_dhcp_settings=DHCP settings
index_dhcp_settings_basic=Basic DHCP settings
index_dhcp_domain_name=DHCP domain name(s)
index_dhcp_client_options=DHCP client options
index_dhcp_range=DHCP IP address ranges
index_dhcp_host_reservations=Host Reservations
index_dhcp_config=Configure DHCP
index_dhcp_tags=DHCP Tag Matching
index_dhcp_other_tags=Other DHCP Tag Matching
index_dhcp_vendorclass=Vendor Class Specification
index_dhcp_userclass=User Class Specification
index_dhcp_bridge_interface=DHCP Interface Bridge

_vendorclass=Vendor class
_userclass=User class
_dhcp_option=DHCP client option
_host=DHCP host specification
_range=DHCP range
_interface_bridge=DHCP interface bridge

dhcp_disabled=DHCP Disabled
dhcp_disabled_help=DHCP server disabled: at least one 'dhcp-range' must be defined
dhcp_ipversion4=IPv4
dhcp_ipversion6=IPv6

# Property labels/descriptions
p_man_desc_dhcp_range=Enable the DHCP server. Addresses will be given out from the range &amp;lt;start-addr&gt; to &amp;lt;end-addr&gt; and from statically defined addresses given in 'dhcp-host' options. If the lease time is given, then leases will be given for that length of time. The lease time is in seconds, or minutes (eg 45m) or hours (eg 1h) or days (2d) or weeks (1w) or &quot;infinite&quot;. If not given, the default lease time is one hour for IPv4 and one day for IPv6. The minimum lease time is two minutes. For IPv6 ranges, the lease time may be &quot;deprecated&quot;; this sets the preferred lifetime sent in a DHCP lease or router advertisement to zero, which causes clients to use other addresses, if available, for new connections as a prelude to renumbering.
p_man_desc_dhcp_host=Specify per host parameters for the DHCP server. This allows a machine with a particular hardware address to be always allocated the same hostname, IP address and lease time. A hostname specified like this overrides any supplied by the DHCP client on the machine. It is also allowable to omit the hardware address and include the hostname, in which case the IP address and lease times will apply to any machine claiming that name. For example 'dhcp-host=00:20:e0:3b:13:af,wap,infinite' tells dnsmasq to give the machine with hardware address 00:20:e0:3b:13:af the name wap, and an infinite DHCP lease. 'dhcp-host=lap,192.168.0.199' tells dnsmasq to always allocate the machine lap the IP address 192.168.0.199.
p_man_desc_dhcp_hostsfile=Read DHCP host information from the specified file. If a directory is given, then read all the files contained in that directory in alphabetical order. The file contains information about one host per line. The format of a line is the same as text to the right of '=' in 'dhcp-host'. The advantage of storing DHCP host information in this file is that it can be changed without re-starting dnsmasq: the file will be re-read when dnsmasq receives SIGHUP.
p_man_desc_dhcp_optsfile=Read DHCP option information from the specified file. If a directory is given, then read all the files contained in that directory in alphabetical order. The advantage of using this option is the same as for 'dhcp-hostsfile': the 'dhcp-optsfile' will be re-read when dnsmasq receives SIGHUP. Note that it is possible to encode the information in a 'dhcp-boot' flag as DHCP options, using the options names bootfile-name, server-ip-address and tftp-server. This allows these to be included in a 'dhcp-optsfile'.
p_man_desc_dhcp_hostsdir=This is equivalent to 'dhcp-hostsfile', except for the following. The path MUST be a directory, and not an individual file. Changed or new files within the directory are read automatically, without the need to send SIGHUP. If a file is deleted or changed after it has been read by dnsmasq, then the host record it contained will remain until dnsmasq receives a SIGHUP, or is restarted; ie host records are only added dynam‐ ically. The order in which the files in a directory are read is not defined.
p_man_desc_dhcp_optsdir=This is equivalent to 'dhcp-optsfile', with the differences noted for 'dhcp-hostsdir'.
p_man_desc_read_ethers=Read /etc/ethers for information about hosts for the DHCP server. The format of /etc/ethers is a hardware address, followed by either a hostname or dotted-quad IP address. When read by dnsmasq these lines have exactly the same effect as 'dhcp-host' options containing the same information. /etc/ethers is re-read when dnsmasq receives SIGHUP. IPv6 addresses are NOT read from /etc/ethers.
p_man_desc_dhcp_option=Specify different or extra options to DHCP clients. By default, dnsmasq sends some standard options to DHCP clients, the netmask and broadcast address are set to the same as the host running dnsmasq, and the DNS server and default route are set to the address of the machine running dnsmasq. (Equivalent rules apply for IPv6.) If the domain name option has been set, that is sent. This configuration allows these defaults to be overridden, or other options specified. The option, to be sent may be given as a decimal number or as &quot;option:&amp;lt;option-name&gt;&quot; The option numbers are specified in RFC2132 and subsequent RFCs. The set of option-names known by dnsmasq can be discovered by running &quot;dnsmasq --help dhcp&quot;. For example, to set the default route option to 192.168.4.4, do 'dhcp-option=3,192.168.4.4' or 'dhcp-option=option:router,192.168.4.4' and to set the time-server address to 192.168.0.4, do 'dhcp-option=42,192.168.0.4' or 'dhcp-option=option:ntp-server,192.168.0.4' The special address 0.0.0.0 is taken to mean &quot;the address of the machine running dnsmasq&quot;.
p_man_desc_dhcp_option_force=This works in exactly the same way as 'dhcp-option' except that the option will always be sent, even if the client does not ask for it in the parameter request list. This is sometimes needed, for example when sending options to PXELinux.
p_man_desc_dhcp_no_override=(IPv4 only) Disable re-use of the DHCP servername and filename fields as extra option space. If it can, dnsmasq moves the boot server and filename information (from 'dhcp-boot') out of their dedicated fields into DHCP options. This make extra space available in the DHCP packet for options but can, rarely, confuse old or broken clients. This flag forces &quot;simple and safe&quot; behaviour to avoid problems in such a case.
p_man_desc_dhcp_relay=Configure dnsmasq to do DHCP relay. The local address is an address allocated to an interface on the host running dnsmasq. All DHCP requests arriving on that interface will we relayed to a remote DHCP server at the server address. It is possible to relay from a single local address to multiple remote servers by using multiple 'dhcp-relay' configs with the same local address and different server addresses. A server address must be an IP literal address, not a domain name. In the case of DHCPv6, the server address may be the ALL_SERVERS multicast address, ff05::1:3. In this case the interface must be given, not be wildcard, and is used to direct the multicast to the correct interface to reach the DHCP server.
p_man_desc_dhcp_vendorclass=Map from a vendor-class string to a tag. Most DHCP clients provide a &quot;vendor class&quot; which represents, in some sense, the type of host. This option maps vendor classes to tags, so that DHCP options may be selectively delivered to different classes of hosts. For example 'dhcp-vendorclass=set:printers,Hewlett-Packard' JetDirect will allow options to be set only for HP printers like so: 'dhcp-option=tag:printers,3,192.168.4.4' The vendor-class string is substring matched against the vendor-class supplied by the client, to allow fuzzy matching. The set: prefix is optional but allowed for consistency.
p_man_desc_dhcp_userclass=Map from a user-class string to a tag (with substring matching, like vendor classes). Most DHCP clients provide a &quot;user class&quot; which is configurable. This option maps user classes to tags, so that DHCP options may be selectively delivered to different classes of hosts. It is possible, for instance to use this to set a different printer server for hosts in the class &quot;accounts&quot; than for hosts in the class &quot;engineering&quot;.
p_man_desc_dhcp_mac=Map from a MAC address to a tag. The MAC address may include wildcards. For example 'dhcp-mac=set:3com,01:34:23:*:*:*' will set the tag &quot;3com&quot; for any host whose MAC address matches the pattern.
p_man_desc_dhcp_circuitid=Map from RFC3046 relay agent options to tags. This data may be provided by DHCP relay agents. The circuit-id is normally given as colon-separated hex, but is also allowed to be a simple string. If an exact match is achieved between the circuit ID and one provided by a relay agent, the tag is set.
p_man_desc_dhcp_remoteid=Map from RFC3046 relay agent options to tags. This data may be provided by DHCP relay agents. The remote-id is normally given as colon-separated hex, but is also allowed to be a simple string. If an exact match is achieved between the agent ID and one provided by a relay agent, the tag is set.
p_man_desc_dhcp_subscrid=(IPv4 and IPv6) Map from RFC3993 subscriber-id relay agent options to tags.
p_man_desc_dhcp_proxy=(IPv4 only) A normal DHCP relay agent is only used to forward the initial parts of a DHCP interaction to the DHCP server. Once a client is configured, it communicates directly with the server. This is undesirable if the relay agent is adding extra information to the DHCP packets, such as that used by 'dhcp-circuitid' and 'dhcp-remoteid'. A full relay implementation can use the RFC 5107 serverid-override option to force the DHCP server to use the relay as a full proxy, with all packets passing through it. This flag provides an alternative method of doing the same thing, for relays which don&#39;t support RFC 5107. Given alone, it manipulates the server-id for all interactions via relays. If a list of IP addresses is given, only interactions via relays at those addresses are affected.
p_man_desc_dhcp_match=Without a value, set the tag if the client sends a DHCP option of the given number or name. When a value is given, set the tag only if the option is sent and matches the value. The value may be of the form &quot;01:ff:*:02&quot; in which case the value must match (apart from wildcards) but the option sent may have unmatched data past the end of the value. The value may also be of the same form as in 'dhcp-option' in which case the option sent is treated as an array, and one element must match, so 'dhcp-match=set:efi-ia32,option:client-arch,6' will set the tag &quot;efi-ia32&quot; if the the number 6 appears in the list of architectures sent by the client in option 93. (See RFC 4578 for details.) If the value is a string, substring matching is used.
p_man_desc_dhcp_name_match=Set the tag if the given name is supplied by a DHCP client. There may be a single trailing wildcard *, which has the usual meaning. Combined with dhcp-ignore or dhcp-ignore-names this gives the ability to ignore certain clients by name, or disallow certain hostnames from being claimed by a client.
p_man_desc_tag_if=Perform boolean operations on tags. Any tag appearing as set:&quot; &amp;lt;tag&gt; &quot; is set if all the tags which appear as &quot;tag: &amp;lt;tag&gt; &quot; are set, (or unset when &quot;tag:! &amp;lt;tag&gt; &quot; is used) If no &quot;tag: &amp;lt;tag&gt; &quot; appears &quot;set: &amp;lt;tag&gt; &quot; tags are set unconditionally. Any number of set: and tag: forms may appear, in any order. 'tag-if' lines are executed in order, so if the tag in &quot;tag: &amp;lt;tag&gt; &quot; is a tag set by another 'tag-if', the line which sets the tag must precede the one which tests it.
p_man_desc_dhcp_ignore=When all the given tags appear in the tag set, ignore the host and do not allocate it a DHCP lease.
p_man_desc_dhcp_ignore_names=When all the given tags appear in the tag set, ignore any hostname provided by the host. Note that, unlike 'dhcp-ignore', it is permissible to supply no tags, in which case DHCP-client supplied hostnames are always ignored, and DHCP hosts are added to the DNS using only 'dhcp-host' configuration in dnsmasq and the contents of /etc/hosts and /etc/ethers.
p_man_desc_dhcp_generate_names=(IPv4 only) Generate a name for DHCP clients which do not otherwise have one, using the MAC address expressed in hex, separated by dashes. Note that if a host provides a name, it will be used by preference to this, unless 'dhcp-ignore-names' is set.
p_man_desc_dhcp_broadcast=(IPv4 only) When all the given tags appear in the tag set, always use broadcast to communicate with the host when it is unconfigured. It is permissible to supply no tags, in which case this is unconditional. Most DHCP clients which need broadcast replies set a flag in their requests so that this happens automatically, some old BOOTP clients do not.
p_man_desc_dhcp_sequential_ip=Dnsmasq is designed to choose IP addresses for DHCP clients using a hash of the client&#39;s MAC address. This normally allows a client&#39;s address to remain stable long-term, even if the client sometimes allows its DHCP lease to expire. In this default mode IP addresses are distributed pseudo-randomly over the entire available address range. There are sometimes circumstances (typically server deployment) where it is more convenient to have IP addresses allocated sequentially, starting from the lowest available address, and setting this flag enables this mode. Note that in the sequential mode, clients which allow a lease to expire are much more likely to move IP address; for this reason it should not be generally used.
p_man_desc_dhcp_ignore_clid=Dnsmasq reads the 'client identifier' (RFC 2131) option sent by clients (if available) to identify clients. This allows serving same IP address for a host using several interfaces. Use this option to disable 'client identifier' reading, i.e. to always identify a host using the MAC address.
p_man_desc_dhcp_lease_max=Limits dnsmasq to the specified maximum number of DHCP leases. The default is 1000. This limit is to prevent DoS attacks from hosts which create thousands of leases and use lots of memory in the dnsmasq process.
p_man_desc_dhcp_authoritative=Should be set when dnsmasq is definitely the only DHCP server on a network. For DHCPv4, it changes the behaviour from strict RFC compliance so that DHCP requests on unknown leases from unknown hosts are not ignored. This allows new hosts to get a lease without a tedious timeout under all circumstances. It also allows dnsmasq to rebuild its lease database without each client needing to reacquire a lease, if the database is lost. For DHCPv6 it sets the priority in replies to 255 (the maximum) instead of 0 (the minimum).
p_man_desc_dhcp_rapid_commit=Enable DHCPv4 Rapid Commit Option specified in RFC 4039. When enabled, dnsmasq will respond to a DHCPDISCOVER message including a Rapid Commit option with a DHCPACK including a Rapid Commit option and fully committed address and configuration information. Should only be enabled if either the server is the only server for the subnet, or multiple servers are present and they each commit a binding for all clients.
p_man_desc_dhcp_alternate_port=(IPv4 only) Change the ports used for DHCP from the default. If this option is given alone, without arguments, it changes the ports used for DHCP from 67 and 68 to 1067 and 1068. If a single argument is given, that port number is used for the server and the port number plus one used for the client. Finally, two port numbers allows arbitrary specification of both server and client ports for DHCP.
p_man_desc_no_ping=(IPv4 only) By default, the DHCP server will attempt to ensure that an address is not in use before allocating it to a host. It does this by sending an ICMP echo request (aka &quot;ping&quot;) to the address in question. If it gets a reply, then the address must already be in use, and another is tried. This flag disables this check. Use with caution.
p_man_desc_log_dhcp=Extra logging for DHCP: log all the options sent to DHCP clients and the tags used to determine them.
p_man_desc_quiet_dhcp=Suppress logging of the routine operation of these protocols. Errors and problems will still be logged. 'quiet-tftp' does not consider file not found to be an error. 'quiet-dhcp' and quiet-dhcp6 are over-ridden by 'log-dhcp'.
p_man_desc_quiet_dhcp6=Suppress logging of the routine operation of these protocols. Errors and problems will still be logged. 'quiet-tftp' does not consider file not found to be an error. 'quiet-dhcp' and quiet-dhcp6 are over-ridden by 'log-dhcp'.
p_man_desc_quiet_ra=Suppress logging of the routine operation of these protocols. Errors and problems will still be logged. 'quiet-tftp' does not consider file not found to be an error. 'quiet-dhcp' and quiet-dhcp6 are over-ridden by 'log-dhcp'.
p_man_desc_dhcp_leasefile=Use the specified file to store DHCP lease information.
p_man_desc_dhcp_duid=(IPv6 only) Specify the server persistent UID which the DHCPv6 server will use. This option is not normally required as dnsmasq creates a DUID automatically when it is first needed. When given, this option provides dnsmasq the data required to create a DUID-EN type DUID. Note that once set, the DUID is stored in the lease database, so to change between DUID-EN and automatically created DUIDs or vice-versa, the lease database must be re-initialised. The enterprise-id is assigned by IANA, and the uid is a string of hex octets unique to a particular device.
p_man_desc_dhcp_script=Whenever a new DHCP lease is created, or an old one destroyed, or a TFTP file transfer completes, the executable specified by this option is run. &amp;lt;path&gt; must be an absolute pathname, no PATH search occurs. The arguments to the process are &quot;add&quot;, &quot;old&quot; or &quot;del&quot;, the MAC address of the host (or DUID for IPv6) , the IP address, and the hostname, if known. &quot;add&quot; means a lease has been created, &quot;del&quot; means it has been destroyed, &quot;old&quot; is a notification of an existing lease when dnsmasq starts or a change to MAC address or hostname of an existing lease (also, lease length or expiry and client-id, if 'leasefile-ro' is set and lease expiry if 'script-on-renewal' is set). If the MAC address is from a network type other than ethernet, it will have the network type prepended, eg &quot;06-01:23:45:67:89:ab&quot; for token ring. The process is run as root (assuming that dnsmasq was originally run as root) even if dnsmasq is configured to change UID to an unprivileged user.
p_man_desc_dhcp_luascript=Specify a script written in Lua, to be run when leases are created, destroyed or changed. To use this option, dnsmasq must be compiled with the correct support. The Lua interpreter is initialised once, when dnsmasq starts, so that global variables persist between lease events. The Lua code must define a lease function, and may provide init and shutdown functions, which are called, without arguments when dnsmasq starts up and terminates. It may also provide a tftp function.
p_man_desc_dhcp_scriptuser=Specify the user as which to run the lease-change script or Lua script. This defaults to root, but can be changed to another user using this flag.
p_man_desc_script_arp=Enable the &quot;arp&quot; and &quot;arp-old&quot; functions in the 'dhcp-script' and 'dhcp-luascript'.
p_man_desc_leasefile_ro=Completely suppress use of the lease database file. The file will not be created, read, or written. Change the way the lease-change script (if one is provided) is called, so that the lease database may be maintained in external storage by the script. In addition to the invocations given in 'dhcp-script' the lease-change script is called once, at dnsmasq startup, with the single argument &quot;init&quot;. When called like this the script should write the saved state of the lease database, in dnsmasq leasefile format, to stdout and exit with zero exit code. Setting this option also forces the leasechange script to be called on changes to the client-id and lease length and expiry time.
p_man_desc_script_on_renewal=Call the DHCP script when the lease expiry time changes, for instance when the lease is renewed.
p_man_desc_bridge_interface=Treat DHCP (v4 and v6) requests and IPv6 Router Solicit packets arriving at any of the &amp;lt;alias&gt; interfaces as if they had arrived at &amp;lt;interface&gt;. This option allows dnsmasq to provide DHCP and RA service over unaddressed and unbridged Ethernet interfaces, e.g. on an OpenStack compute host where each such interface is a TAP interface to a VM, or as in &quot;old style bridging&quot; on BSD platforms. A trailing '*' wildcard can be used in each &amp;lt;alias&gt;.
p_man_desc_shared_network=The DHCP server determines which DHCP ranges are usable for allocating an address to a DHCP client based on the network from which the DHCP request arrives, and the IP configuration of the server&#39;s interface on that network. The shared-network option extends the available subnets (and therefore DHCP ranges) beyond the subnets configured on the arrival interface.
p_man_desc_domain=Specifies DNS domains for the DHCP server. Domains may be be given unconditionally (without the IP range) or for limited IP ranges. This has two effects; firstly it causes the DHCP server to return the domain to any hosts which request it, and secondly it sets the domain which it is legal for DHCP-configured hosts to claim. The intention is to constrain hostnames so that an untrusted host on the LAN cannot advertise its name via DHCP as e.g. &quot;microsoft.com&quot; and capture traffic not meant for it. If no domain suffix is specified, then any DHCP hostname with a domain part (ie with a period) will be disallowed and logged. If suffix is specified, then hostnames with a domain part are allowed, provided the domain part matches the suffix. In addition, when a suffix is set then hostnames without a domain part have the suffix added as an optional domain part. Eg on my network I can set 'domain=thekelleys.org.uk' and have a machine whose DHCP hostname is &quot;laptop&quot;. The IP address for that machine is available from dnsmasq both as &quot;laptop&quot; and &quot;laptop.thekelleys.org.uk&quot;. If the domain is given as &quot;#&quot; then the domain is read from the first &quot;search&quot; directive in /etc/resolv.conf (or equivalent).
p_man_desc_dhcp_fqdn=In the default mode, dnsmasq inserts the unqualified names of DHCP clients into the DNS. For this reason, the names must be unique, even if two clients which have the same name are in different domains. If a second DHCP client appears which has the same name as an existing client, the name is transferred to the new client. If 'dhcp-fqdn' is set, this behaviour changes: the unqualified name is no longer put in the DNS, only the qualified name. Two DHCP clients with the same name may both keep the name, provided that the domain part is different (ie the fully qualified names differ.) To ensure that all names have a domain part, there must be at least 'domain' without an address specified when 'dhcp-fqdn' is set.
p_man_desc_dhcp_client_update=Normally, when giving a DHCP lease, dnsmasq sets flags in the FQDN option to tell the client not to attempt a DDNS update with its name and IP address. This is because the name-IP pair is automatically added into dnsmasq&#39;s DNS view. This flag suppresses that behaviour, this is useful, for instance, to allow Windows clients to update Active Directory servers. See RFC 4702 for details.
p_man_desc_enable_ra=Enable dnsmasq&#39;s IPv6 Router Advertisement feature. DHCPv6 doesn&#39;t handle complete network configuration in the same way as DHCPv4. Router discovery and (possibly) prefix discovery for autonomous address creation are handled by a different protocol. When DHCP is in use, only a subset of this is needed, and dnsmasq can handle it, using existing DHCP configuration to provide most data. When RA is enabled, dnsmasq will advertise a prefix for each 'dhcp-range', with default router as the relevant link-local address on the machine running dnsmasq. By default, the &quot;managed address&quot; bits are set, and the &quot;use SLAAC&quot; bit is reset. This can be changed for individual subnets with the mode keywords described in 'dhcp-range'. RFC6106 DNS parameters are included in the advertisements. By default, the relevant link-local address of the machine running dnsmasq is sent as recursive DNS server. If provided, the DHCPv6 options dns-server and domain-search are used for the DNS server (RDNSS) and the domain search list (DNSSL).
p_man_desc_ra_param=Set non-default values for router advertisements sent via an interface. The priority field for the router may be altered from the default of medium with eg 'ra-param=eth0,high'. The interval between router advertisements may be set (in seconds) with 'ra-param=eth0,60'. The lifetime of the route may be changed or set to zero, which allows a router to advertise prefixes but not a route via itself. 'ra-param=eth0,0,0' (A value of zero for the interval means the default value.) All four parameters may be set at once. 'ra-param=eth0,mtu:1280,low,60,1200'
p_man_desc_dhcp_reply_delay=Delays sending DHCPOFFER and PROXYDHCP replies for at least the specified number of seconds. This can be used as workaround for bugs in PXE boot firmware that does not function properly when receiving an instant reply. This option takes into account the time already spent waiting (e.g. performing ping check) if any.

p_desc_dhcp_vendorclass=Vendor Class Specification
p_desc_dhcp_userclass=User Class Specification
p_desc_dhcp_option=DHCP Client Options
p_desc_domain=DHCP Domain Name(s)
p_desc_dhcp_range=DHCP Server Address Ranges
p_desc_dhcp_host=DHCP Reservations
p_desc_bridge_interface=DHCP Interface Bridge

p_label_dhcp_range=Enable the DHCP server. Addresses will be given out from the range &amp;lt;start-addr&gt; to &amp;lt;end-addr&gt;
p_label_dhcp_host=Specify per-host parameters for the DHCP server
p_label_dhcp_hostsfile=Read DHCP host information from the specified file or directory
p_label_dhcp_optsfile=Read DHCP option information from the specified file or directory
p_label_dhcp_hostsdir=Equivalent to 'dhcp-hostsfile', except the path MUST be a directory
p_label_dhcp_optsdir=Equivalent to 'dhcp-optsfile', with the differences noted for 'dhcp-hostsdir'
p_label_read_ethers=Read /etc/ethers for information about hosts for the DHCP server
p_label_dhcp_option=Option number or name
p_label_dhcp_option_force=Exactly the same way 'dhcp-option' except that the option will always be sent, even if the client does not ask for it
p_label_dhcp_no_override=Disable re-use of the DHCP servername and filename fields as extra option space (IPv4 only)
p_label_dhcp_relay=Configure dnsmasq to do DHCP relay. The local address is an address allocated to an interface on the host running dnsmasq
p_label_dhcp_vendorclass=Map from a vendor-class string to a tag
p_label_dhcp_userclass=Map from a user-class string to a tag (with substring matching, like vendor classes)
p_label_dhcp_mac=Map from a MAC address to a tag
p_label_dhcp_circuitid=Map from RFC3046 relay agent options to tags
p_label_dhcp_remoteid=Map from RFC3046 relay agent options to tags
p_label_dhcp_subscrid=Map from RFC3993 subscriber-id relay agent options to tags (IPv4 and IPv6)
p_label_dhcp_proxy=Alternative method of using the relay as a full proxy, with all packets passing through it (IPv4 only)
p_label_dhcp_match=No value: set the tag if the client sends a DHCP option of the given number or name. With value: set the tag only if the option is sent and matches the value
p_label_dhcp_name_match=Set the tag if the given name is supplied by a DHCP client
p_label_tag_if=Perform boolean operations on tags
p_label_dhcp_ignore=When all the given tags appear in the tag set, ignore the host and do not allocate it a DHCP lease
p_label_dhcp_ignore_names=When all the given tags appear in the tag set, ignore any hostname provided by the host
p_label_dhcp_generate_names=Generate a name for DHCP clients which do not otherwise have one, using the MAC address expressed in hex (IPv4 only)
p_label_dhcp_broadcast=When all the given tags appear in the tag set, always use broadcast to communicate with the host when it is unconfigured (IPv4 only)
p_label_dhcp_sequential_ip=Enables allocating IP addresses sequentially, starting from the lowest available address
p_label_dhcp_ignore_clid=Disable 'client identifier' reading, i.e. to always identify a host using the MAC address
p_label_dhcp_lease_max=Limits dnsmasq to the specified maximum number of DHCP leases
p_label_dhcp_authoritative=DHCPv4: DHCP requests on unknown leases from unknown hosts are not ignored. DHCPv6: sets the priority in replies to 255 (the maximum) instead of 0 (the minimum)
p_label_dhcp_rapid_commit=Enable DHCPv4 Rapid Commit Option specified in RFC 4039
p_label_dhcp_alternate_port=Change the ports used for DHCP from the default (IPv4 only)
p_label_no_ping=Disables ping prior to IP allocation (IPv4 only)
p_label_log_dhcp=Extra logging for DHCP: log all the options sent to DHCP clients and the tags used to determine them.
p_label_quiet_dhcp=Suppress logging of the routine operation of DHCP
p_label_quiet_dhcp6=Suppress logging of the routine operation of DHCPv6
p_label_quiet_ra=Suppress logging of the routine operation of IPv6 Router Advertisement
p_label_dhcp_leasefile=Use the specified file to store DHCP lease information
p_label_dhcp_duid=Specify the server persistent UID which the DHCPv6 server will use (IPv6 only)
p_label_dhcp_script=Whenever a new DHCP lease is created, or an old one destroyed, or a TFTP file transfer completes, the executable specified by this option is run
p_label_dhcp_luascript=Specify a script written in Lua, to be run when leases are created, destroyed or changed
p_label_dhcp_scriptuser=Specify the user as which to run the lease-change script or Lua script
p_label_script_arp=Enable the &quot;arp&quot; and &quot;arp-old&quot; functions in the 'dhcp-script' and 'dhcp-luascript'
p_label_leasefile_ro=Completely suppress use of the lease database file
p_label_script_on_renewal=Call the DHCP script when the lease expiry time changes
p_label_bridge_interface=Treat DHCP (v4 and v6) requests and IPv6 Router Solicit packets arriving at any of the &amp;lt;alias&gt; interfaces as if they had arrived at &amp;lt;interface&gt;
p_label_shared_network=Extends the available subnets (and therefore DHCP ranges) beyond the subnets configured on the arrival interface
p_label_domain=DNS domains for the DHCP server
p_label_dhcp_fqdn=If set, the unqualified name is no longer put in the DNS, only the qualified name
p_label_dhcp_client_update=Suppresses setting flags in the FQDN option to tell the client not to attempt a DDNS update with its name and IP address
p_label_enable_ra=Enable dnsmasq&#39;s IPv6 Router Advertisement feature
p_label_ra_param=Set non-default values for router advertisements sent via an interface
p_label_dhcp_reply_delay=Delays sending DHCPOFFER and PROXYDHCP replies for at least the specified number of seconds

# Individual value labels
p_label_val_tag_if=Perform boolean operations on tags
p_label_val_start_ip_address=Start IP Address
p_label_val_end_ip_address=End IP Address
p_label_val_leasetime=Lease time
p_label_val_prefix_length=Prefix length
p_label_val_broadcast=Broadcast
p_label_val_static=Static
p_label_val_proxy=Proxy
p_label_val_ra-only=RA Only
p_label_val_ra-names=RA Names
p_label_val_ra-stateless=RA Stateless
p_label_val_slaac=SLAAC
p_label_val_ra-advrouter=RA Adv Router
p_label_val_off-link=Off-link
p_label_val_short_static=S
p_label_val_short_proxy=P
p_label_val_short_ra-only=R
p_label_val_short_ra-names=N
p_label_val_short_ra-stateless=T
p_label_val_short_slaac=A
p_label_val_short_ra-advrouter=V
p_label_val_short_off-link=O
p_label_val_hwaddr=Hardware address (MAC)
p_label_val_mac=Client ID/MAC
p_label_val_clientid=Client ID
p_label_val_infiniband=InfiniBand
p_label_val_ignore=Ignore Client ID
p_label_val_encap=Option Encapsulation
p_label_val_vi_encap=Vendor-Identifying Vendor Options
p_label_val_option_vendor=Vendor
p_label_val_option=Option
p_label_val_dhcp_option_forced=Forced
p_label_val_local_address=Local address
p_label_val_server_address=Server address
p_label_val_vendorclass=Vendor-class
p_label_val_userclass=User class
p_label_val_circuitid=Circuit ID
p_label_val_remoteid=Remote ID
p_label_val_subscriberid=Subscriber ID
p_label_val_tag=Tag
p_label_val_tags=Tag(s)
p_label_val_set_tag=Set tag
p_label_val_set_tags=Set tag(s)

# DHCP option descriptions
dhcp_opt_desc_1_6=Client Identifier
dhcp_opt_desc_2_6=Server Identifier
dhcp_opt_desc_3_6=Identity Association for Non-temporary Addresses
dhcp_opt_desc_4_6=Identity Association for Temporary Addresses
dhcp_opt_desc_5_6=IA Address
dhcp_opt_desc_6_6=Option Request
dhcp_opt_desc_7_6=Preference
dhcp_opt_desc_8_6=Elapsed Time
dhcp_opt_desc_9_6=Relay Message
dhcp_opt_desc_11_6=Authentication Option
dhcp_opt_desc_12_6=Server Unicast
dhcp_opt_desc_13_6=Status Code
dhcp_opt_desc_14_6=Rapid Commit
dhcp_opt_desc_15_6=User Class
dhcp_opt_desc_16_6=Vendor Class
dhcp_opt_desc_17_6=Vendor-specific Information
dhcp_opt_desc_18_6=Interface-Id
dhcp_opt_desc_19_6=Reconfigure Message
dhcp_opt_desc_20_6=Reconfigure Accept
dhcp_opt_desc_21_6=SIP Servers Domain Name List
dhcp_opt_desc_22_6=SIP Servers IPv6 Address List
dhcp_opt_desc_23_6=DNS Recursive Name Server
dhcp_opt_desc_24_6=Domain Search List
dhcp_opt_desc_25_6=Identity Association for Prefix Delegation
dhcp_opt_desc_26_6=IA Prefix
dhcp_opt_desc_27_6=Network Information Service (NIS) Servers
dhcp_opt_desc_28_6=Network Information Service V2 (NIS+) Servers
dhcp_opt_desc_29_6=Network Information Service (NIS) Domain Name
dhcp_opt_desc_30_6=Network Information Service V2 (NIS+) Domain Name
dhcp_opt_desc_31_6=Simple Network Time Protocol (SNTP) Servers
dhcp_opt_desc_32_6=Information Refresh Time
dhcp_opt_desc_33_6=Broadcast and Multicast Service Controller Domain Name List
dhcp_opt_desc_34_6=Broadcast and Multicast Service Controller IPv6 Address
dhcp_opt_desc_36_6=Civic Location
dhcp_opt_desc_37_6=Relay Agent Remote-ID
dhcp_opt_desc_38_6=Relay Agent Subscriber-ID
dhcp_opt_desc_39_6=Client Fully Qualified Domain Name (FQDN)
dhcp_opt_desc_40_6=PANA Authentication Agent
dhcp_opt_desc_41_6=New POSIX Timezone
dhcp_opt_desc_42_6=New TZDB Timezone
dhcp_opt_desc_43_6=Relay Agent Echo Request
dhcp_opt_desc_44_6=LEASEQUERY Query
dhcp_opt_desc_45_6=LEASEQUERY Client Data
dhcp_opt_desc_46_6=LEASEQUERY Client Last Transaction Time
dhcp_opt_desc_47_6=LEASEQUERY Relay Data
dhcp_opt_desc_48_6=LEASEQUERY Client Link
dhcp_opt_desc_49_6=MIPv6 Home Network ID FQDN
dhcp_opt_desc_50_6=MIPv6 Visited Home Network Information
dhcp_opt_desc_51_6=LoST Server
dhcp_opt_desc_52_6=CAPWAP AC
dhcp_opt_desc_53_6=Relay-ID
dhcp_opt_desc_54_6=MoS IPv6 Address
dhcp_opt_desc_55_6=MoS Domain Name List
dhcp_opt_desc_56_6=NTP Server
dhcp_opt_desc_57_6=Access Network Domain Name
dhcp_opt_desc_58_6=SIP User Agent Configuration Service Domains
dhcp_opt_desc_59_6=Boot File Uniform Resource Locator (URL)
dhcp_opt_desc_60_6=Boot File Parameters
dhcp_opt_desc_61_6=Client System Architecture Type
dhcp_opt_desc_62_6=Client Network Interface Identifier
dhcp_opt_desc_63_6=GeoLoc
dhcp_opt_desc_64_6=AFTR-Name
dhcp_opt_desc_65_6=ERP Local Domain Name
dhcp_opt_desc_66_6=Relay-Supplied Options
dhcp_opt_desc_67_6=Prefix Exclude
dhcp_opt_desc_68_6=Virtual Subnet Selection
dhcp_opt_desc_69_6=MIPv6 Identified Home Network Information
dhcp_opt_desc_70_6=MIPv6 Unrestricted Home Network Information
dhcp_opt_desc_71_6=MIPv6 Home Network Prefix
dhcp_opt_desc_72_6=MIPv6 Home Agent Address
dhcp_opt_desc_73_6=MIPv6 Home Agent FQDN
dhcp_opt_desc_74_6=RDNSS Selection
dhcp_opt_desc_75_6=Kerberos Principal Name
dhcp_opt_desc_76_6=Kerberos Realm Name
dhcp_opt_desc_77_6=Kerberos Default Realm Name
dhcp_opt_desc_78_6=Kerberos KDC
dhcp_opt_desc_79_6=Client Link-Layer Address
dhcp_opt_desc_80_6=Link Address
dhcp_opt_desc_81_6=RADIUS
dhcp_opt_desc_82_6=SOL_MAX_RT
dhcp_opt_desc_83_6=INF_MAX_RT
dhcp_opt_desc_84_6=Address Selection
dhcp_opt_desc_85_6=Address Selection Policy Table
dhcp_opt_desc_86_6=PCP Server
dhcp_opt_desc_87_6=DHCPv4 Message Option
dhcp_opt_desc_88_6=DHCP 4o6 Server Address
dhcp_opt_desc_89_6=S46 Rule
dhcp_opt_desc_90_6=S46 BR (Border Relay)
dhcp_opt_desc_91_6=S46 DMR (Default Mapping Rule)
dhcp_opt_desc_92_6=S46 IPv4/IPv6 Address Binding
dhcp_opt_desc_93_6=S46 Port Parameters
dhcp_opt_desc_94_6=S46 MAP-E Container
dhcp_opt_desc_95_6=S46 MAP-T Container
dhcp_opt_desc_96_6=S46 Lightweight 4over6 Container
dhcp_opt_desc_97_6=4rd
dhcp_opt_desc_98_6=Encapsulated 4rd Mapping-Rule Parameters
dhcp_opt_desc_99_6=Encapsulated 4rd Non-Mapping-Rule Parameters
dhcp_opt_desc_100_6=LEASEQUERY Server Base Time
dhcp_opt_desc_101_6=LEASEQUERY Server Query Start Time
dhcp_opt_desc_102_6=LEASEQUERY Server Query End Time
dhcp_opt_desc_103_6=Captive-Portal
dhcp_opt_desc_104_6=MPL Parameter Configuration
dhcp_opt_desc_105_6=Access-Technology-Type
dhcp_opt_desc_106_6=Network-Name
dhcp_opt_desc_107_6=Access-Point-Name
dhcp_opt_desc_108_6=Access-Point-BSSID
dhcp_opt_desc_109_6=Operator-Identifier
dhcp_opt_desc_110_6=Operator-Realm
dhcp_opt_desc_111_6=S46 Priority
dhcp_opt_desc_112_6=Manufacturer Usage Description (MUD) URL
dhcp_opt_desc_113_6=OPTION_V6_PREFIX64
dhcp_opt_desc_114_6=Failover binding-status
dhcp_opt_desc_115_6=Failover connect flags
dhcp_opt_desc_116_6=Failover DNS removal info
dhcp_opt_desc_117_6=Failover DNS host name
dhcp_opt_desc_118_6=Failover DNS zone name
dhcp_opt_desc_119_6=Failover DNS flags
dhcp_opt_desc_120_6=Failover expiration time
dhcp_opt_desc_121_6=Failover maximum unacked BNDUPD messages
dhcp_opt_desc_122_6=Failover MCLT
dhcp_opt_desc_123_6=Failover partner lifetime
dhcp_opt_desc_124_6=Failover partner lifetime sent
dhcp_opt_desc_125_6=Failover partner down time
dhcp_opt_desc_126_6=Failover raw client time
dhcp_opt_desc_127_6=Failover protocol version
dhcp_opt_desc_128_6=Failover keepalive-time
dhcp_opt_desc_129_6=Failover reconfigure data
dhcp_opt_desc_130_6=Failover relationship name
dhcp_opt_desc_131_6=Failover server flags
dhcp_opt_desc_132_6=Failover endpoint state
dhcp_opt_desc_133_6=Failover start time of the current state
dhcp_opt_desc_134_6=Failover current state expiration time
dhcp_opt_desc_135_6=Relay Source Port
dhcp_opt_desc_136_6=SZTP Redirect
dhcp_opt_desc_137_6=Softwire Source Binding Prefix Hint
dhcp_opt_desc_138_6=Identity Association for Link-Layer Addresses
dhcp_opt_desc_139_6=Link-Layer Addresses
dhcp_opt_desc_140_6=SLAP QUAD
dhcp_opt_desc_141_6=DOTS Reference Identifier
dhcp_opt_desc_142_6=DOTS Address
dhcp_opt_desc_143_6=ANDSF IPv6 Address Option
dhcp_opt_desc_144_6=Encrypted DNS
dhcp_opt_desc_145_6=Registered Homenet Domain
dhcp_opt_desc_146_6=Forward Distribution Manager
dhcp_opt_desc_147_6=Reverse Distribution Manager Server

dhcp_opt_desc_1_4=Subnet Mask
dhcp_opt_desc_2_4=Time Offset
dhcp_opt_desc_3_4=Router
dhcp_opt_desc_4_4=Time Server
dhcp_opt_desc_5_4=Name Server
dhcp_opt_desc_6_4=Domain Name Server
dhcp_opt_desc_7_4=Log Server
dhcp_opt_desc_8_4=Cookie Server
dhcp_opt_desc_9_4=LPR Server
dhcp_opt_desc_10_4=Impress Server
dhcp_opt_desc_11_4=Resource Location Server
dhcp_opt_desc_12_4=Host Name
dhcp_opt_desc_13_4=Boot File Size
dhcp_opt_desc_14_4=Merit Dump File
dhcp_opt_desc_15_4=Domain Name
dhcp_opt_desc_16_4=Swap Server
dhcp_opt_desc_17_4=Root Path
dhcp_opt_desc_18_4=Extensions Path
dhcp_opt_desc_19_4=IP Forwarding Enable/Disable
dhcp_opt_desc_20_4=Non-Local Source Routing Enable/Disable
dhcp_opt_desc_21_4=Policy Filter
dhcp_opt_desc_22_4=Maximum Datagram Reassembly Size
dhcp_opt_desc_23_4=Default IP Time-to-live
dhcp_opt_desc_24_4=Path MTU Aging Timeout
dhcp_opt_desc_25_4=Path MTU Plateau Table
dhcp_opt_desc_26_4=Interface MTU
dhcp_opt_desc_27_4=All Subnets are Local
dhcp_opt_desc_28_4=Broadcast Address
dhcp_opt_desc_29_4=Perform Mask Discovery
dhcp_opt_desc_30_4=Mask Supplier
dhcp_opt_desc_31_4=Perform Router Discovery
dhcp_opt_desc_32_4=Router Solicitation Address
dhcp_opt_desc_33_4=Static Route
dhcp_opt_desc_34_4=Trailer Encapsulation
dhcp_opt_desc_35_4=ARP Cache Timeout
dhcp_opt_desc_36_4=Ethernet Encapsulation
dhcp_opt_desc_37_4=TCP Default TTL
dhcp_opt_desc_38_4=TCP Keepalive Interval
dhcp_opt_desc_39_4=TCP Keepalive Garbage
dhcp_opt_desc_40_4=Network Information Service Domain
dhcp_opt_desc_41_4=Network Information Servers
dhcp_opt_desc_42_4=Network Time Protocol Servers
dhcp_opt_desc_43_4=Vendor Specific Information
dhcp_opt_desc_44_4=NetBIOS over TCP/IP Name Server
dhcp_opt_desc_45_4=NetBIOS over TCP/IP Datagram Distribution Server
dhcp_opt_desc_46_4=NetBIOS over TCP/IP Node Type
dhcp_opt_desc_47_4=NetBIOS over TCP/IP Scope
dhcp_opt_desc_48_4=X Window System Font Server
dhcp_opt_desc_49_4=X Window System Display Manager
dhcp_opt_desc_50_4=Requested IP Address
dhcp_opt_desc_51_4=IP Address Lease Time
dhcp_opt_desc_52_4=Option Overload
dhcp_opt_desc_53_4=DHCP Message Type
dhcp_opt_desc_54_4=Server Identifier
dhcp_opt_desc_55_4=Parameter Request List
dhcp_opt_desc_56_4=Message
dhcp_opt_desc_57_4=Maximum DHCP Message Size
dhcp_opt_desc_58_4=Renewal (T1) Time Value
dhcp_opt_desc_59_4=Rebinding (T2) Time Value
dhcp_opt_desc_60_4=Vendor class identifier
dhcp_opt_desc_61_4=Client-identifier
dhcp_opt_desc_62_4=NetWare/IP Domain
dhcp_opt_desc_63_4=NetWare/IP Option
dhcp_opt_desc_64_4=Network Information Service+ Domain
dhcp_opt_desc_65_4=Network Information Service+ Servers
dhcp_opt_desc_66_4=TFTP server name
dhcp_opt_desc_67_4=Bootfile name
dhcp_opt_desc_68_4=Mobile IP Home Agent
dhcp_opt_desc_69_4=Simple Mail Transport Protocol (SMTP) Server
dhcp_opt_desc_70_4=Post Office Protocol (POP3) Server
dhcp_opt_desc_71_4=Network News Transport Protocol (NNTP) Server
dhcp_opt_desc_72_4=Default World Wide Web (WWW) Server
dhcp_opt_desc_73_4=Default Finger Server
dhcp_opt_desc_74_4=Default Internet Relay Chat (IRC) Server
dhcp_opt_desc_75_4=StreetTalk Server
dhcp_opt_desc_76_4=StreetTalk Directory Assistance (STDA) Server
dhcp_opt_desc_77_4=User Class
dhcp_opt_desc_78_4=SLP Directory Agent
dhcp_opt_desc_79_4=SLP Service Scope
dhcp_opt_desc_80_4=Rapid Commit
dhcp_opt_desc_81_4=FQDN
dhcp_opt_desc_82_4=Relay Agent Information
dhcp_opt_desc_83_4=iSNS
dhcp_opt_desc_85_4=NDS Servers
dhcp_opt_desc_86_4=NDS Tree Name
dhcp_opt_desc_87_4=NDS Context
dhcp_opt_desc_88_4=BCMCS Controller Domain Name list
dhcp_opt_desc_89_4=BCMCS Controller IPv4 address
dhcp_opt_desc_90_4=Authentication
dhcp_opt_desc_91_4=client-last-transaction-time
dhcp_opt_desc_92_4=associated-ip
dhcp_opt_desc_93_4=Client System
dhcp_opt_desc_94_4=Client NDI
dhcp_opt_desc_95_4=LDAP
dhcp_opt_desc_97_4=UUID/GUID
dhcp_opt_desc_98_4=User-Auth
dhcp_opt_desc_99_4=GEOCONF_CIVIC
dhcp_opt_desc_100_4=PCode
dhcp_opt_desc_101_4=TCode
dhcp_opt_desc_108_4=IPv6-Only Preferred
dhcp_opt_desc_109_4=OPTION_DHCP4O6_S46_SADDR
dhcp_opt_desc_112_4=Netinfo Address
dhcp_opt_desc_113_4=Netinfo Tag
dhcp_opt_desc_114_4=DHCP Captive-Portal
dhcp_opt_desc_116_4=Auto-Config
dhcp_opt_desc_117_4=Name Service Search
dhcp_opt_desc_118_4=Subnet Selection
dhcp_opt_desc_119_4=Domain Search List
dhcp_opt_desc_120_4=SIP Servers
dhcp_opt_desc_121_4=Classless Routes
dhcp_opt_desc_122_4=CableLabs Client Configuration
dhcp_opt_desc_123_4=GeoConf
dhcp_opt_desc_124_4=V-I Vendor Class
dhcp_opt_desc_125_4=V-I Vendor-Specific Information
dhcp_opt_desc_128_4=PXE - undefined (vendor specific)
dhcp_opt_desc_129_4=PXE - undefined (vendor specific)
dhcp_opt_desc_136_4=OPTION_PANA_AGENT
dhcp_opt_desc_137_4=OPTION_V4_LOST
dhcp_opt_desc_138_4=OPTION_CAPWAP_AC_V4
dhcp_opt_desc_139_4=OPTION-IPv4_Address-MoS
dhcp_opt_desc_140_4=OPTION-IPv4_FQDN-MoS
dhcp_opt_desc_141_4=SIP UA Configuration Service Domains
dhcp_opt_desc_142_4=OPTION-IPv4_Address-ANDSF
dhcp_opt_desc_143_4=OPTION_V4_SZTP_REDIRECT
dhcp_opt_desc_144_4=GeoLoc
dhcp_opt_desc_145_4=FORCERENEW_NONCE_CAPABLE
dhcp_opt_desc_146_4=RDNSS Selection
dhcp_opt_desc_147_4=OPTION_V4_DOTS_RI
dhcp_opt_desc_148_4=OPTION_V4_DOTS_ADDRESS
dhcp_opt_desc_150_4=TFTP Server Address
dhcp_opt_desc_151_4=status-code
dhcp_opt_desc_152_4=base-time
dhcp_opt_desc_153_4=start-time-of-state
dhcp_opt_desc_154_4=query-start-time
dhcp_opt_desc_155_4=query-end-time
dhcp_opt_desc_156_4=dhcp-state
dhcp_opt_desc_157_4=data-source
dhcp_opt_desc_158_4=OPTION_V4_PCP_SERVER
dhcp_opt_desc_159_4=OPTION_V4_PORTPARAMS
dhcp_opt_desc_161_4=OPTION_MUD_URL_V4
dhcp_opt_desc_162_4=OPTION_V4_DNR
dhcp_opt_desc_175_4=Etherboot
dhcp_opt_desc_176_4=IP Telephone
dhcp_opt_desc_177_4=Etherboot
dhcp_opt_desc_208_4=PXELINUX Magic
dhcp_opt_desc_209_4=Configuration File
dhcp_opt_desc_210_4=Path Prefix
dhcp_opt_desc_211_4=Reboot Time
dhcp_opt_desc_212_4=OPTION_6RD
dhcp_opt_desc_213_4=OPTION_V4_ACCESS_DOMAIN
dhcp_opt_desc_220_4=Subnet Allocation
dhcp_opt_desc_221_4=Virtual Subnet Selection (VSS)
dhcp_opt_desc_252_4=WPAD
dhcp_opt_desc_255_4=

# TFTP settings
index_tftp_settings=TFTP settings
index_tftp_settings_basic=Basic TFTP settings
index_tftp_boot_pxe_settings=BOOTP/PXE settings

tftp_disabled=TFTP Disabled
tftp_disabled_help=TFTP server disabled: 'enable-tftp' must be enabled
_networkid=Network ID

# Property labels/descriptions
p_man_desc_dhcp_pxe_vendor=According to UEFI and PXE specifications, DHCP packets between PXE clients and proxy PXE servers should have PXEClient in their vendor-class field. However, the firmware of computers from a few vendors is customized to carry a different identifier in that field. This option is used to consider such identifiers valid for identifying PXE clients. For instance &quot;dhcp-pxe-vendor=PXEClient,HW-Client&quot; will enable dnsmasq to also provide proxy PXE service to those PXE clients with HW-Client in as their identifier.
p_man_desc_enable_tftp=Enable the TFTP server function. This is deliberately limited to that needed to net-boot a client. Only reading is allowed; the tsize and blk‐ size extensions are supported (tsize is only supported in octet mode). Without an argument, the TFTP service is provided to the same set of interfaces as DHCP service. If the list of interfaces is provided, that defines which interfaces receive TFTP service.
p_man_desc_tftp_root=Look for files to transfer using TFTP relative to the given directory. When this is set, TFTP paths which include &quot;..&quot; are rejected, to stop clients getting outside the specified root. Absolute paths (starting with /) are allowed, but they must be within the tftp-root. If the optional interface argument is given, the directory is only used for TFTP requests via that interface.
p_man_desc_tftp_unique_root=Add the IP or hardware address of the TFTP client as a path component on the end of the TFTP-root. Only valid if a 'tftp-root' is set and the directory exists. Defaults to adding IP address (in standard dotted-quad format). For instance, if 'tftp-root' is &quot;/tftp&quot; and client 1.2.3.4 requests file &quot;myfile&quot; then the effective path will be &quot;/tftp/1.2.3.4/myfile&quot; if /tftp/1.2.3.4 exists or /tftp/myfile otherwise. When &quot;=mac&quot; is specified it will append the MAC address instead, using lowercase zero padded digits separated by dashes, e.g.: 01-02-03-04-aa-bb Note that resolving MAC addresses is only possible if the client is in the local network or obtained a DHCP lease from us.
p_man_desc_tftp_port_range=A TFTP server listens on a well-known port (69) for connection initiation, but it also uses a dynamically-allocated port for each connection. Normally these are allocated by the OS, but this option specifies a range of ports for use by TFTP transfers. This can be useful when TFTP has to traverse a firewall. The start of the range cannot be lower than 1025 unless dnsmasq is running as root. The number of concurrent TFTP connections is limited by the size of the port range.
p_man_desc_tftp_no_fail=Do not abort startup if specified tftp root directories are inaccessible.
p_man_desc_tftp_secure=Enable TFTP secure mode: without this, any file which is readable by the dnsmasq process under normal unix access-control rules is available via TFTP. When the 'tftp-secure' flag is given, only files owned by the user running the dnsmasq process are accessible. If dnsmasq is being run as root, different rules apply: 'tftp-secure' has no effect, but only files which have the world-readable bit set are accessible. It is not recommended to run dnsmasq as root with TFTP enabled, and certainly not without specifying 'tftp-root'. Doing so can expose any world-readable file on the server to any host on the net.
p_man_desc_tftp_lowercase=Convert filenames in TFTP requests to all lowercase. This is useful for requests from Windows machines, which have case-insensitive filesystems and tend to play fast-and-loose with case in filenames. Note that dnsmasq&#39;s tftp server always converts &quot;\&quot; to &quot;/&quot; in filenames.
p_man_desc_tftp_max=Set the maximum number of concurrent TFTP connections allowed. This defaults to 50. When serving a large number of TFTP connections, per-process file descriptor limits may be encountered. Dnsmasq needs one file descriptor for each concurrent TFTP connection and one file descriptor per unique file (plus a few others). So serving the same file simultaneously to n clients will use require about n + 10 file descriptors, serving different files simultaneously to n clients will require about (2*n) + 10 descriptors. If 'tftp-port-range' is given, that can affect the number of concurrent connections.
p_man_desc_tftp_mtu=Use size as the ceiling of the MTU supported by the intervening network when negotiating TFTP blocksize, overriding the MTU setting of the local interface if it is larger.
p_man_desc_tftp_no_blocksize=Stop the TFTP server from negotiating the &quot;blocksize&quot; option with a client. Some buggy clients request this option but then behave badly when it is granted.
p_man_desc_tftp_single_port=Run in a mode where the TFTP server uses ONLY the well-known port (69) for its end of the TFTP transfer. This allows TFTP to work when there in NAT is the path between client and server. Note that this is not strictly compliant with the RFCs specifying the TFTP protocol: use at your own risk.
p_man_desc_dhcp_boot=(IPv4 only) Set BOOTP options to be returned by the DHCP server. Server name and address are optional: if not provided, the name is left empty, and the address set to the address of the machine running dnsmasq. If dnsmasq is providing a TFTP service (see 'enable-tftp' ) then only the filename is required here to enable network booting. If the optional tag(s) are given, they must match for this configuration to be sent. Instead of an IP address, the TFTP server address can be given as a domain name which is looked up in /etc/hosts. This name can be associated in /etc/hosts with multiple IP addresses, which are used round-robin. This facility can be used to load balance the tftp load among a set of servers.
p_man_desc_pxe_service=Most uses of PXE boot-ROMS simply allow the PXE system to obtain an IP address and then download the file specified by 'dhcp-boot' and execute it. However the PXE system is capable of more complex functions when supported by a suitable DHCP server. This specifies a boot option which may appear in a PXE boot menu. &quot;CSA&quot; is client system type, only services of the correct type will appear in a menu. The known types are x86PC, PC98, IA64_EFI, Alpha, Arc_x86, Intel_Lean_Client, IA32_EFI, x86-64_EFI, Xscale_EFI, BC_EFI, ARM32_EFI and ARM64_EFI; an integer may be used for other types. The parameter after the menu text may be a file name, in which case dnsmasq acts as a boot server and directs the PXE client to download the file by TFTP, either from itself ('enable-tftp' must be set for this to work) or another TFTP server if the final server address/name is given. Note that the &quot;layer&quot; suffix (normally &quot;.0&quot;) is supplied by PXE, and need not be added to the basename. Alternatively, the basename may be a filename, complete with suffix, in which case no layer suffix is added. If an integer boot service type, rather than a basename is given, then the PXE client will search for a suitable boot service for that type on the network. This search may be done by broadcast, or direct to a server if its IP address/name is provided. If no boot service type or filename is provided (or a boot service type of 0 is specified) then the menu entry will abort the net boot procedure and continue booting from local media. The server address can be given as a domain name which is looked up in /etc/hosts. This name can be associated in /etc/hosts with multiple IP addresses, which are used round-robin.
p_man_desc_pxe_prompt=Setting this provides a prompt to be displayed after PXE boot. If the timeout is given then after the timeout has elapsed with no keyboard input, the first available menu option will be automatically executed. If the timeout is zero then the first available menu item will be executed immediately. If 'pxe-prompt' is omitted the system will wait for user input if there are multiple items in the menu, but boot immediately if there is only one. See 'pxe-service' for details of menu items.
p_man_desc_bootp_dynamic=(IPv4 only) Enable dynamic allocation of IP addresses to BOOTP clients. Use this with care, since each address allocated to a BOOTP client is leased forever, and therefore becomes permanently unavailable for re-use by other hosts. if this is given without tags, then it unconditionally enables dynamic allocation. With tags, only when the tags are all set. It may be repeated with different tag sets.

p_desc_bootp_dynamic=Enable dynamic allocation of IP addresses to BOOTP clients (IPv4 only)

p_label_dhcp_pxe_vendor=Used to consider customized vendor identifiers valid for identifying PXE clients
p_label_enable_tftp=Enable the TFTP server function
p_label_tftp_root=Look for files to transfer using TFTP relative to the given directory
p_label_tftp_unique_root=Add the IP or hardware address of the TFTP client as a path component on the end of the TFTP-root
p_label_tftp_port_range=Specifies a range of ports for use by TFTP transfers
p_label_tftp_no_fail=Do not abort startup if specified tftp root directories are inaccessible
p_label_tftp_secure=Enable TFTP secure mode
p_label_tftp_lowercase=Convert filenames in TFTP requests to all lowercase
p_label_tftp_max=Set the maximum number of concurrent TFTP connections allowed
p_label_tftp_mtu=Use size as the ceiling of the MTU supported by the intervening network when negotiating TFTP blocksize
p_label_tftp_no_blocksize=Stop the TFTP server from negotiating the &quot;blocksize&quot; option with a client
p_label_tftp_single_port=Run in a mode where the TFTP server uses ONLY the well-known port (69) for its end of the TFTP transfer
p_label_dhcp_boot=Use BOOTP (network boot; IPv4 only)
p_label_pxe_service=Specifies a boot option which may appear in a PXE boot menu
p_label_pxe_prompt=Provides a prompt to be displayed after PXE boot

# Individual value labels
p_label_val_server_name=Server name
p_label_val_csa=CSA
p_label_val_menutext=Menu text
p_label_val_basename=Base name
p_label_val_server_address_or_name=Server address or name
p_label_val_prompt=Prompt
p_label_val_timeout=Timeout
p_label_val_vendor=Vendor
p_label_val_serverport=Server port
p_label_val_clientport=Client port
p_label_val_networkids=Network ID(s)
p_label_val_enterpriseid=Enterprise ID
p_label_val_uid=UID
p_label_val_aliases=Alias(es)
p_label_val_local=Local
p_label_val_mtu=MTU
p_label_val_interval=Interval
p_label_val_lifetime=Lifetime
p_label_val_delay=Delay (sec)
p_label_val_max_connections=Max connections
p_label_val_start_port=Start port
p_label_val_end_port=End port

# Unused


